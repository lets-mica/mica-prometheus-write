# ====================== 服务配置 ======================
server.port=8080

# 指标过滤，支持,或;来分割多个规则，支持前缀 `xxx*` 和正则 `xxx.*`，前缀判断更加高效
metrics.filter=node_*;kafka_*

# 指标发送到的 kafka topic
send.topic=metrics

# 认证相关
auth.basic_auth.enable=false
auth.basic_auth.username=xxxxxx
auth.basic_auth.password=xxxxxx

# ====================== Kafka 配置 ======================
# Kafka 集群地址 (必填)
kafka.bootstrap.servers=localhost:9092

# 客户端ID (可选，用于服务端日志记录)
kafka.client.id=my-kafka-client

# ====================== 自动创建Topic配置 ======================
# 允许自动创建Topic (默认为true)
kafka.allow.auto.create.topics=true

# 自动创建的Topic分区数 (可选，默认1)
kafka.num.partitions=3

# 自动创建的Topic副本数 (可选，默认1)
kafka.default.replication.factor=1

# 消息确认机制 (可选，默认1)
# all: 所有副本确认 | 1: leader确认 | 0: 不等待确认
kafka.acks=all

# 重试次数 (可选，默认2147483647)
kafka.retries=3

# 批次大小 (字节，可选，默认16384)
kafka.batch.size=16384

# 等待更多消息加入批次的时间 (毫秒，可选，默认0)
kafka.linger.ms=1

# 生产者缓冲区大小 (字节，可选，默认33554432)
kafka.buffer.memory=33554432

# Key序列化器 (必填)
kafka.key.serializer=org.apache.kafka.common.serialization.StringSerializer

# Value序列化器 (必填)
kafka.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# 压缩类型 (可选，none/gzip/snappy/lz4/zstd)
kafka.compression.type=none

# 请求超时时间 (毫秒，可选，默认30000)
kafka.request.timeout.ms=30000

# ====================== 管理配置 ======================
# 连接超时时间 (毫秒，可选，默认60000)
kafka.connections.max.idle.ms=60000

# 安全协议 (可选，PLAINTEXT/SSL/SASL_PLAINTEXT/SASL_SSL)
kafka.security.protocol=PLAINTEXT

# SSL配置 (可选)
# kafka.ssl.truststore.location=/path/to/truststore.jks
# kafka.ssl.truststore.password=password
# kafka.ssl.keystore.location=/path/to/keystore.jks
# kafka.ssl.keystore.password=password

# SASL配置 (可选)
# kafka.sasl.mechanism=PLAIN
# kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
#   username="admin" \
#   password="admin-secret";

# ====================== tinylog 日志配置 ======================
# writer1，写出到控制台
tinylog.writer1          = console
tinylog.writer1.level    = info
tinylog.writer1.format   = {date: HH:mm:ss.SSS} [{thread}] {level} {class-name}.{method} : {message}
# writer2，写出到文件
tinylog.writer2          = rolling file
tinylog.writer2.level    = info
tinylog.writer2.format   = {date: HH:mm:ss.SSS} [{thread}] {level} {class-name}.{method} : {message}
tinylog.writer2.latest   = logs/app.log
tinylog.writer2.file     = logs/app_{date:yyyy-MM-dd}.log
tinylog.writer2.charset  = UTF-8
tinylog.writer2.buffered = true
tinylog.writer2.policies = startup, daily: 03:00
tinylog.writer2.backups  = 30
tinylog.writer2.convert  = gzip
# level
tinylog.level@org.tio = warn
tinylog.level@org.tio.client.TioClient = off
tinylog.level@org.tio.server = info
tinylog.level@net.dreamlu = info
