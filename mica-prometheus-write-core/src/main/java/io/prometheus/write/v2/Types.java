// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: types.proto
// Protobuf Java Version: 4.31.1

package io.prometheus.write.v2;

@com.google.protobuf.Generated
public final class Types {
  private Types() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 31,
      /* patch= */ 1,
      /* suffix= */ "",
      Types.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.Request)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @return A list containing the symbols.
     */
    java.util.List<String>
        getSymbolsList();
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @return The count of symbols.
     */
    int getSymbolsCount();
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @param index The index of the element to return.
     * @return The symbols at the given index.
     */
    String getSymbols(int index);
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the symbols at the given index.
     */
    com.google.protobuf.ByteString
        getSymbolsBytes(int index);

    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    java.util.List<TimeSeries>
        getTimeseriesList();
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    TimeSeries getTimeseries(int index);
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    int getTimeseriesCount();
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    java.util.List<? extends TimeSeriesOrBuilder>
        getTimeseriesOrBuilderList();
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    TimeSeriesOrBuilder getTimeseriesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Request represents a request to write the given timeseries to a remote destination.
   * This message was introduced in the Remote Write 2.0 specification:
   * https://prometheus.io/docs/concepts/remote_write_spec_2_0/
   *
   * The canonical Content-Type request header value for this message is
   * "application/x-protobuf;proto=io.prometheus.write.v2.Request"
   *
   * NOTE: gogoproto options might change in future for this file, they
   * are not part of the spec proto (they only modify the generated Go code, not
   * the serialized message). See: https://github.com/prometheus/prometheus/issues/11908
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.Request}
   */
  public static final class Request extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.Request)
      RequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        Request.class.getName());
    }
    // Use Request.newBuilder() to construct.
    private Request(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Request() {
      symbols_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      timeseries_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Types.internal_static_io_prometheus_write_v2_Request_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Types.internal_static_io_prometheus_write_v2_Request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Request.class, Builder.class);
    }

    public static final int SYMBOLS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList symbols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @return A list containing the symbols.
     */
    public com.google.protobuf.ProtocolStringList
        getSymbolsList() {
      return symbols_;
    }
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @return The count of symbols.
     */
    public int getSymbolsCount() {
      return symbols_.size();
    }
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @param index The index of the element to return.
     * @return The symbols at the given index.
     */
    public String getSymbols(int index) {
      return symbols_.get(index);
    }
    /**
     * <pre>
     * symbols contains a de-duplicated array of string elements used for various
     * items in a Request message, like labels and metadata items. For the sender's convenience
     * around empty values for optional fields like unit_ref, symbols array MUST start with
     * empty string.
     *
     * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
     * need to lookup the actual string by index from symbols array. The order of
     * strings is up to the sender. The receiver should not assume any particular encoding.
     * </pre>
     *
     * <code>repeated string symbols = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the symbols at the given index.
     */
    public com.google.protobuf.ByteString
        getSymbolsBytes(int index) {
      return symbols_.getByteString(index);
    }

    public static final int TIMESERIES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<TimeSeries> timeseries_;
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    @Override
    public java.util.List<TimeSeries> getTimeseriesList() {
      return timeseries_;
    }
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    @Override
    public java.util.List<? extends TimeSeriesOrBuilder>
        getTimeseriesOrBuilderList() {
      return timeseries_;
    }
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    @Override
    public int getTimeseriesCount() {
      return timeseries_.size();
    }
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    @Override
    public TimeSeries getTimeseries(int index) {
      return timeseries_.get(index);
    }
    /**
     * <pre>
     * timeseries represents an array of distinct series with 0 or more samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
     */
    @Override
    public TimeSeriesOrBuilder getTimeseriesOrBuilder(
        int index) {
      return timeseries_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < symbols_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, symbols_.getRaw(i));
      }
      for (int i = 0; i < timeseries_.size(); i++) {
        output.writeMessage(5, timeseries_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < symbols_.size(); i++) {
          dataSize += computeStringSizeNoTag(symbols_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSymbolsList().size();
      }
      for (int i = 0; i < timeseries_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, timeseries_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Request)) {
        return super.equals(obj);
      }
      Request other = (Request) obj;

      if (!getSymbolsList()
          .equals(other.getSymbolsList())) return false;
      if (!getTimeseriesList()
          .equals(other.getTimeseriesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSymbolsCount() > 0) {
        hash = (37 * hash) + SYMBOLS_FIELD_NUMBER;
        hash = (53 * hash) + getSymbolsList().hashCode();
      }
      if (getTimeseriesCount() > 0) {
        hash = (37 * hash) + TIMESERIES_FIELD_NUMBER;
        hash = (53 * hash) + getTimeseriesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Request parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Request parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Request prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Request represents a request to write the given timeseries to a remote destination.
     * This message was introduced in the Remote Write 2.0 specification:
     * https://prometheus.io/docs/concepts/remote_write_spec_2_0/
     *
     * The canonical Content-Type request header value for this message is
     * "application/x-protobuf;proto=io.prometheus.write.v2.Request"
     *
     * NOTE: gogoproto options might change in future for this file, they
     * are not part of the spec proto (they only modify the generated Go code, not
     * the serialized message). See: https://github.com/prometheus/prometheus/issues/11908
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.Request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.Request)
        RequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Types.internal_static_io_prometheus_write_v2_Request_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Types.internal_static_io_prometheus_write_v2_Request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Request.class, Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.Request.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        symbols_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        if (timeseriesBuilder_ == null) {
          timeseries_ = java.util.Collections.emptyList();
        } else {
          timeseries_ = null;
          timeseriesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Types.internal_static_io_prometheus_write_v2_Request_descriptor;
      }

      @Override
      public Request getDefaultInstanceForType() {
        return Request.getDefaultInstance();
      }

      @Override
      public Request build() {
        Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Request buildPartial() {
        Request result = new Request(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(Request result) {
        if (timeseriesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            timeseries_ = java.util.Collections.unmodifiableList(timeseries_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.timeseries_ = timeseries_;
        } else {
          result.timeseries_ = timeseriesBuilder_.build();
        }
      }

      private void buildPartial0(Request result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          symbols_.makeImmutable();
          result.symbols_ = symbols_;
        }
      }

      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Request) {
          return mergeFrom((Request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Request other) {
        if (other == Request.getDefaultInstance()) return this;
        if (!other.symbols_.isEmpty()) {
          if (symbols_.isEmpty()) {
            symbols_ = other.symbols_;
            bitField0_ |= 0x00000001;
          } else {
            ensureSymbolsIsMutable();
            symbols_.addAll(other.symbols_);
          }
          onChanged();
        }
        if (timeseriesBuilder_ == null) {
          if (!other.timeseries_.isEmpty()) {
            if (timeseries_.isEmpty()) {
              timeseries_ = other.timeseries_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTimeseriesIsMutable();
              timeseries_.addAll(other.timeseries_);
            }
            onChanged();
          }
        } else {
          if (!other.timeseries_.isEmpty()) {
            if (timeseriesBuilder_.isEmpty()) {
              timeseriesBuilder_.dispose();
              timeseriesBuilder_ = null;
              timeseries_ = other.timeseries_;
              bitField0_ = (bitField0_ & ~0x00000002);
              timeseriesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetTimeseriesFieldBuilder() : null;
            } else {
              timeseriesBuilder_.addAllMessages(other.timeseries_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 34: {
                String s = input.readStringRequireUtf8();
                ensureSymbolsIsMutable();
                symbols_.add(s);
                break;
              } // case 34
              case 42: {
                TimeSeries m =
                    input.readMessage(
                        TimeSeries.parser(),
                        extensionRegistry);
                if (timeseriesBuilder_ == null) {
                  ensureTimeseriesIsMutable();
                  timeseries_.add(m);
                } else {
                  timeseriesBuilder_.addMessage(m);
                }
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringArrayList symbols_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureSymbolsIsMutable() {
        if (!symbols_.isModifiable()) {
          symbols_ = new com.google.protobuf.LazyStringArrayList(symbols_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @return A list containing the symbols.
       */
      public com.google.protobuf.ProtocolStringList
          getSymbolsList() {
        symbols_.makeImmutable();
        return symbols_;
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @return The count of symbols.
       */
      public int getSymbolsCount() {
        return symbols_.size();
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @param index The index of the element to return.
       * @return The symbols at the given index.
       */
      public String getSymbols(int index) {
        return symbols_.get(index);
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the symbols at the given index.
       */
      public com.google.protobuf.ByteString
          getSymbolsBytes(int index) {
        return symbols_.getByteString(index);
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @param index The index to set the value at.
       * @param value The symbols to set.
       * @return This builder for chaining.
       */
      public Builder setSymbols(
          int index, String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSymbolsIsMutable();
        symbols_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @param value The symbols to add.
       * @return This builder for chaining.
       */
      public Builder addSymbols(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSymbolsIsMutable();
        symbols_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @param values The symbols to add.
       * @return This builder for chaining.
       */
      public Builder addAllSymbols(
          Iterable<String> values) {
        ensureSymbolsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, symbols_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSymbols() {
        symbols_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * symbols contains a de-duplicated array of string elements used for various
       * items in a Request message, like labels and metadata items. For the sender's convenience
       * around empty values for optional fields like unit_ref, symbols array MUST start with
       * empty string.
       *
       * To decode each of the symbolized strings, referenced, by "ref(s)" suffix, you
       * need to lookup the actual string by index from symbols array. The order of
       * strings is up to the sender. The receiver should not assume any particular encoding.
       * </pre>
       *
       * <code>repeated string symbols = 4;</code>
       * @param value The bytes of the symbols to add.
       * @return This builder for chaining.
       */
      public Builder addSymbolsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureSymbolsIsMutable();
        symbols_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<TimeSeries> timeseries_ =
        java.util.Collections.emptyList();
      private void ensureTimeseriesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          timeseries_ = new java.util.ArrayList<TimeSeries>(timeseries_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          TimeSeries, TimeSeries.Builder, TimeSeriesOrBuilder> timeseriesBuilder_;

      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public java.util.List<TimeSeries> getTimeseriesList() {
        if (timeseriesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeseries_);
        } else {
          return timeseriesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public int getTimeseriesCount() {
        if (timeseriesBuilder_ == null) {
          return timeseries_.size();
        } else {
          return timeseriesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public TimeSeries getTimeseries(int index) {
        if (timeseriesBuilder_ == null) {
          return timeseries_.get(index);
        } else {
          return timeseriesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder setTimeseries(
          int index, TimeSeries value) {
        if (timeseriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeseriesIsMutable();
          timeseries_.set(index, value);
          onChanged();
        } else {
          timeseriesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder setTimeseries(
          int index, TimeSeries.Builder builderForValue) {
        if (timeseriesBuilder_ == null) {
          ensureTimeseriesIsMutable();
          timeseries_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeseriesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder addTimeseries(TimeSeries value) {
        if (timeseriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeseriesIsMutable();
          timeseries_.add(value);
          onChanged();
        } else {
          timeseriesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder addTimeseries(
          int index, TimeSeries value) {
        if (timeseriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeseriesIsMutable();
          timeseries_.add(index, value);
          onChanged();
        } else {
          timeseriesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder addTimeseries(
          TimeSeries.Builder builderForValue) {
        if (timeseriesBuilder_ == null) {
          ensureTimeseriesIsMutable();
          timeseries_.add(builderForValue.build());
          onChanged();
        } else {
          timeseriesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder addTimeseries(
          int index, TimeSeries.Builder builderForValue) {
        if (timeseriesBuilder_ == null) {
          ensureTimeseriesIsMutable();
          timeseries_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeseriesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder addAllTimeseries(
          Iterable<? extends TimeSeries> values) {
        if (timeseriesBuilder_ == null) {
          ensureTimeseriesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeseries_);
          onChanged();
        } else {
          timeseriesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder clearTimeseries() {
        if (timeseriesBuilder_ == null) {
          timeseries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          timeseriesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public Builder removeTimeseries(int index) {
        if (timeseriesBuilder_ == null) {
          ensureTimeseriesIsMutable();
          timeseries_.remove(index);
          onChanged();
        } else {
          timeseriesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public TimeSeries.Builder getTimeseriesBuilder(
          int index) {
        return internalGetTimeseriesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public TimeSeriesOrBuilder getTimeseriesOrBuilder(
          int index) {
        if (timeseriesBuilder_ == null) {
          return timeseries_.get(index);  } else {
          return timeseriesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public java.util.List<? extends TimeSeriesOrBuilder>
           getTimeseriesOrBuilderList() {
        if (timeseriesBuilder_ != null) {
          return timeseriesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeseries_);
        }
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public TimeSeries.Builder addTimeseriesBuilder() {
        return internalGetTimeseriesFieldBuilder().addBuilder(
            TimeSeries.getDefaultInstance());
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public TimeSeries.Builder addTimeseriesBuilder(
          int index) {
        return internalGetTimeseriesFieldBuilder().addBuilder(
            index, TimeSeries.getDefaultInstance());
      }
      /**
       * <pre>
       * timeseries represents an array of distinct series with 0 or more samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.TimeSeries timeseries = 5;</code>
       */
      public java.util.List<TimeSeries.Builder>
           getTimeseriesBuilderList() {
        return internalGetTimeseriesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          TimeSeries, TimeSeries.Builder, TimeSeriesOrBuilder>
          internalGetTimeseriesFieldBuilder() {
        if (timeseriesBuilder_ == null) {
          timeseriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              TimeSeries, TimeSeries.Builder, TimeSeriesOrBuilder>(
                  timeseries_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          timeseries_ = null;
        }
        return timeseriesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.Request)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.Request)
    private static final Request DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Request();
    }

    public static Request getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Request>
        PARSER = new com.google.protobuf.AbstractParser<Request>() {
      @Override
      public Request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Request> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Request> getParserForType() {
      return PARSER;
    }

    @Override
    public Request getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimeSeriesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.TimeSeries)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * labels_refs is a list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's length is always
     * a multiple of two, and the underlying labels should be sorted lexicographically.
     *
     * Note that there might be multiple TimeSeries objects in the same
     * Requests with the same labels e.g. for different exemplars, metadata
     * or created timestamp.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return A list containing the labelsRefs.
     */
    java.util.List<Integer> getLabelsRefsList();
    /**
     * <pre>
     * labels_refs is a list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's length is always
     * a multiple of two, and the underlying labels should be sorted lexicographically.
     *
     * Note that there might be multiple TimeSeries objects in the same
     * Requests with the same labels e.g. for different exemplars, metadata
     * or created timestamp.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return The count of labelsRefs.
     */
    int getLabelsRefsCount();
    /**
     * <pre>
     * labels_refs is a list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's length is always
     * a multiple of two, and the underlying labels should be sorted lexicographically.
     *
     * Note that there might be multiple TimeSeries objects in the same
     * Requests with the same labels e.g. for different exemplars, metadata
     * or created timestamp.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @param index The index of the element to return.
     * @return The labelsRefs at the given index.
     */
    int getLabelsRefs(int index);

    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    java.util.List<Sample>
        getSamplesList();
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    Sample getSamples(int index);
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    int getSamplesCount();
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    java.util.List<? extends SampleOrBuilder>
        getSamplesOrBuilderList();
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    SampleOrBuilder getSamplesOrBuilder(
        int index);

    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    java.util.List<Histogram>
        getHistogramsList();
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    Histogram getHistograms(int index);
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    int getHistogramsCount();
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    java.util.List<? extends HistogramOrBuilder>
        getHistogramsOrBuilderList();
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    HistogramOrBuilder getHistogramsOrBuilder(
        int index);

    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    java.util.List<Exemplar>
        getExemplarsList();
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    Exemplar getExemplars(int index);
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    int getExemplarsCount();
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    java.util.List<? extends ExemplarOrBuilder>
        getExemplarsOrBuilderList();
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    ExemplarOrBuilder getExemplarsOrBuilder(
        int index);

    /**
     * <pre>
     * metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
     * @return Whether the metadata field is set.
     */
    boolean hasMetadata();
    /**
     * <pre>
     * metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
     * @return The metadata.
     */
    Metadata getMetadata();
    /**
     * <pre>
     * metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
     */
    MetadataOrBuilder getMetadataOrBuilder();

    /**
     * <pre>
     * created_timestamp represents an optional created timestamp associated with
     * this series' samples in ms format, typically for counter or histogram type
     * metrics. Created timestamp represents the time when the counter started
     * counting (sometimes referred to as start timestamp), which can increase
     * the accuracy of query results.
     *
     * Note that some receivers might require this and in return fail to
     * ingest such samples within the Request.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     *
     * Note that the "optional" keyword is omitted due to
     * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
     * Zero value means value not set. If you need to use exactly zero value for
     * the timestamp, use 1 millisecond before or after.
     * </pre>
     *
     * <code>int64 created_timestamp = 6;</code>
     * @return The createdTimestamp.
     */
    long getCreatedTimestamp();
  }
  /**
   * <pre>
   * TimeSeries represents a single series.
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.TimeSeries}
   */
  public static final class TimeSeries extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.TimeSeries)
      TimeSeriesOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        TimeSeries.class.getName());
    }
    // Use TimeSeries.newBuilder() to construct.
    private TimeSeries(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TimeSeries() {
      labelsRefs_ = emptyIntList();
      samples_ = java.util.Collections.emptyList();
      histograms_ = java.util.Collections.emptyList();
      exemplars_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Types.internal_static_io_prometheus_write_v2_TimeSeries_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Types.internal_static_io_prometheus_write_v2_TimeSeries_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TimeSeries.class, Builder.class);
    }

    private int bitField0_;
    public static final int LABELS_REFS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList labelsRefs_ =
        emptyIntList();
    /**
     * <pre>
     * labels_refs is a list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's length is always
     * a multiple of two, and the underlying labels should be sorted lexicographically.
     *
     * Note that there might be multiple TimeSeries objects in the same
     * Requests with the same labels e.g. for different exemplars, metadata
     * or created timestamp.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return A list containing the labelsRefs.
     */
    @Override
    public java.util.List<Integer>
        getLabelsRefsList() {
      return labelsRefs_;
    }
    /**
     * <pre>
     * labels_refs is a list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's length is always
     * a multiple of two, and the underlying labels should be sorted lexicographically.
     *
     * Note that there might be multiple TimeSeries objects in the same
     * Requests with the same labels e.g. for different exemplars, metadata
     * or created timestamp.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return The count of labelsRefs.
     */
    public int getLabelsRefsCount() {
      return labelsRefs_.size();
    }
    /**
     * <pre>
     * labels_refs is a list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's length is always
     * a multiple of two, and the underlying labels should be sorted lexicographically.
     *
     * Note that there might be multiple TimeSeries objects in the same
     * Requests with the same labels e.g. for different exemplars, metadata
     * or created timestamp.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @param index The index of the element to return.
     * @return The labelsRefs at the given index.
     */
    public int getLabelsRefs(int index) {
      return labelsRefs_.getInt(index);
    }
    private int labelsRefsMemoizedSerializedSize = -1;

    public static final int SAMPLES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<Sample> samples_;
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    @Override
    public java.util.List<Sample> getSamplesList() {
      return samples_;
    }
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    @Override
    public java.util.List<? extends SampleOrBuilder>
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    @Override
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    @Override
    public Sample getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <pre>
     * Timeseries messages can either specify samples or (native) histogram samples
     * (histogram field), but not both. For a typical sender (real-time metric
     * streaming), in healthy cases, there will be only one sample or histogram.
     *
     * Samples and histograms are sorted by timestamp (older first).
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
     */
    @Override
    public SampleOrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    public static final int HISTOGRAMS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<Histogram> histograms_;
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    @Override
    public java.util.List<Histogram> getHistogramsList() {
      return histograms_;
    }
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.prometheus.write.v2.Types.HistogramOrBuilder> 
        getHistogramsOrBuilderList() {
      return histograms_;
    }
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    @java.lang.Override
    public int getHistogramsCount() {
      return histograms_.size();
    }
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.Histogram getHistograms(int index) {
      return histograms_.get(index);
    }
    /**
     * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.HistogramOrBuilder getHistogramsOrBuilder(
        int index) {
      return histograms_.get(index);
    }

    public static final int EXEMPLARS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<io.prometheus.write.v2.Types.Exemplar> exemplars_;
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    @java.lang.Override
    public java.util.List<io.prometheus.write.v2.Types.Exemplar> getExemplarsList() {
      return exemplars_;
    }
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.prometheus.write.v2.Types.ExemplarOrBuilder> 
        getExemplarsOrBuilderList() {
      return exemplars_;
    }
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    @java.lang.Override
    public int getExemplarsCount() {
      return exemplars_.size();
    }
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.Exemplar getExemplars(int index) {
      return exemplars_.get(index);
    }
    /**
     * <pre>
     * exemplars represents an optional set of exemplars attached to this series' samples.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.ExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      return exemplars_.get(index);
    }

    public static final int METADATA_FIELD_NUMBER = 5;
    private io.prometheus.write.v2.Types.Metadata metadata_;
    /**
     * <pre>
     * metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
     * @return Whether the metadata field is set.
     */
    @java.lang.Override
    public boolean hasMetadata() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
     * @return The metadata.
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.Metadata getMetadata() {
      return metadata_ == null ? io.prometheus.write.v2.Types.Metadata.getDefaultInstance() : metadata_;
    }
    /**
     * <pre>
     * metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.MetadataOrBuilder getMetadataOrBuilder() {
      return metadata_ == null ? io.prometheus.write.v2.Types.Metadata.getDefaultInstance() : metadata_;
    }

    public static final int CREATED_TIMESTAMP_FIELD_NUMBER = 6;
    private long createdTimestamp_ = 0L;
    /**
     * <pre>
     * created_timestamp represents an optional created timestamp associated with
     * this series' samples in ms format, typically for counter or histogram type
     * metrics. Created timestamp represents the time when the counter started
     * counting (sometimes referred to as start timestamp), which can increase
     * the accuracy of query results.
     *
     * Note that some receivers might require this and in return fail to
     * ingest such samples within the Request.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     *
     * Note that the "optional" keyword is omitted due to
     * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
     * Zero value means value not set. If you need to use exactly zero value for
     * the timestamp, use 1 millisecond before or after.
     * </pre>
     *
     * <code>int64 created_timestamp = 6;</code>
     * @return The createdTimestamp.
     */
    @java.lang.Override
    public long getCreatedTimestamp() {
      return createdTimestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getLabelsRefsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(labelsRefsMemoizedSerializedSize);
      }
      for (int i = 0; i < labelsRefs_.size(); i++) {
        output.writeUInt32NoTag(labelsRefs_.getInt(i));
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(2, samples_.get(i));
      }
      for (int i = 0; i < histograms_.size(); i++) {
        output.writeMessage(3, histograms_.get(i));
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        output.writeMessage(4, exemplars_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(5, getMetadata());
      }
      if (createdTimestamp_ != 0L) {
        output.writeInt64(6, createdTimestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < labelsRefs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(labelsRefs_.getInt(i));
        }
        size += dataSize;
        if (!getLabelsRefsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        labelsRefsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, samples_.get(i));
      }
      for (int i = 0; i < histograms_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, histograms_.get(i));
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, exemplars_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getMetadata());
      }
      if (createdTimestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, createdTimestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.prometheus.write.v2.Types.TimeSeries)) {
        return super.equals(obj);
      }
      io.prometheus.write.v2.Types.TimeSeries other = (io.prometheus.write.v2.Types.TimeSeries) obj;

      if (!getLabelsRefsList()
          .equals(other.getLabelsRefsList())) return false;
      if (!getSamplesList()
          .equals(other.getSamplesList())) return false;
      if (!getHistogramsList()
          .equals(other.getHistogramsList())) return false;
      if (!getExemplarsList()
          .equals(other.getExemplarsList())) return false;
      if (hasMetadata() != other.hasMetadata()) return false;
      if (hasMetadata()) {
        if (!getMetadata()
            .equals(other.getMetadata())) return false;
      }
      if (getCreatedTimestamp()
          != other.getCreatedTimestamp()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsRefsCount() > 0) {
        hash = (37 * hash) + LABELS_REFS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsRefsList().hashCode();
      }
      if (getSamplesCount() > 0) {
        hash = (37 * hash) + SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getSamplesList().hashCode();
      }
      if (getHistogramsCount() > 0) {
        hash = (37 * hash) + HISTOGRAMS_FIELD_NUMBER;
        hash = (53 * hash) + getHistogramsList().hashCode();
      }
      if (getExemplarsCount() > 0) {
        hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
        hash = (53 * hash) + getExemplarsList().hashCode();
      }
      if (hasMetadata()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
      }
      hash = (37 * hash) + CREATED_TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCreatedTimestamp());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.prometheus.write.v2.Types.TimeSeries parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.prometheus.write.v2.Types.TimeSeries parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.TimeSeries parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.prometheus.write.v2.Types.TimeSeries prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TimeSeries represents a single series.
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.TimeSeries}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.TimeSeries)
        io.prometheus.write.v2.Types.TimeSeriesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_TimeSeries_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_TimeSeries_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.prometheus.write.v2.Types.TimeSeries.class, io.prometheus.write.v2.Types.TimeSeries.Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.TimeSeries.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          internalGetSamplesFieldBuilder();
          internalGetHistogramsFieldBuilder();
          internalGetExemplarsFieldBuilder();
          internalGetMetadataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        labelsRefs_ = emptyIntList();
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
        } else {
          samples_ = null;
          samplesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (histogramsBuilder_ == null) {
          histograms_ = java.util.Collections.emptyList();
        } else {
          histograms_ = null;
          histogramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
        } else {
          exemplars_ = null;
          exemplarsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        metadata_ = null;
        if (metadataBuilder_ != null) {
          metadataBuilder_.dispose();
          metadataBuilder_ = null;
        }
        createdTimestamp_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_TimeSeries_descriptor;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.TimeSeries getDefaultInstanceForType() {
        return io.prometheus.write.v2.Types.TimeSeries.getDefaultInstance();
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.TimeSeries build() {
        io.prometheus.write.v2.Types.TimeSeries result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.TimeSeries buildPartial() {
        io.prometheus.write.v2.Types.TimeSeries result = new io.prometheus.write.v2.Types.TimeSeries(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(io.prometheus.write.v2.Types.TimeSeries result) {
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        if (histogramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            histograms_ = java.util.Collections.unmodifiableList(histograms_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.histograms_ = histograms_;
        } else {
          result.histograms_ = histogramsBuilder_.build();
        }
        if (exemplarsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.exemplars_ = exemplars_;
        } else {
          result.exemplars_ = exemplarsBuilder_.build();
        }
      }

      private void buildPartial0(io.prometheus.write.v2.Types.TimeSeries result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          labelsRefs_.makeImmutable();
          result.labelsRefs_ = labelsRefs_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.metadata_ = metadataBuilder_ == null
              ? metadata_
              : metadataBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.createdTimestamp_ = createdTimestamp_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.prometheus.write.v2.Types.TimeSeries) {
          return mergeFrom((io.prometheus.write.v2.Types.TimeSeries)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.prometheus.write.v2.Types.TimeSeries other) {
        if (other == io.prometheus.write.v2.Types.TimeSeries.getDefaultInstance()) return this;
        if (!other.labelsRefs_.isEmpty()) {
          if (labelsRefs_.isEmpty()) {
            labelsRefs_ = other.labelsRefs_;
            labelsRefs_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureLabelsRefsIsMutable();
            labelsRefs_.addAll(other.labelsRefs_);
          }
          onChanged();
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000002);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        if (histogramsBuilder_ == null) {
          if (!other.histograms_.isEmpty()) {
            if (histograms_.isEmpty()) {
              histograms_ = other.histograms_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureHistogramsIsMutable();
              histograms_.addAll(other.histograms_);
            }
            onChanged();
          }
        } else {
          if (!other.histograms_.isEmpty()) {
            if (histogramsBuilder_.isEmpty()) {
              histogramsBuilder_.dispose();
              histogramsBuilder_ = null;
              histograms_ = other.histograms_;
              bitField0_ = (bitField0_ & ~0x00000004);
              histogramsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetHistogramsFieldBuilder() : null;
            } else {
              histogramsBuilder_.addAllMessages(other.histograms_);
            }
          }
        }
        if (exemplarsBuilder_ == null) {
          if (!other.exemplars_.isEmpty()) {
            if (exemplars_.isEmpty()) {
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureExemplarsIsMutable();
              exemplars_.addAll(other.exemplars_);
            }
            onChanged();
          }
        } else {
          if (!other.exemplars_.isEmpty()) {
            if (exemplarsBuilder_.isEmpty()) {
              exemplarsBuilder_.dispose();
              exemplarsBuilder_ = null;
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000008);
              exemplarsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetExemplarsFieldBuilder() : null;
            } else {
              exemplarsBuilder_.addAllMessages(other.exemplars_);
            }
          }
        }
        if (other.hasMetadata()) {
          mergeMetadata(other.getMetadata());
        }
        if (other.getCreatedTimestamp() != 0L) {
          setCreatedTimestamp(other.getCreatedTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureLabelsRefsIsMutable();
                labelsRefs_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureLabelsRefsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  labelsRefs_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 18: {
                io.prometheus.write.v2.Types.Sample m =
                    input.readMessage(
                        io.prometheus.write.v2.Types.Sample.parser(),
                        extensionRegistry);
                if (samplesBuilder_ == null) {
                  ensureSamplesIsMutable();
                  samples_.add(m);
                } else {
                  samplesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                io.prometheus.write.v2.Types.Histogram m =
                    input.readMessage(
                        io.prometheus.write.v2.Types.Histogram.parser(),
                        extensionRegistry);
                if (histogramsBuilder_ == null) {
                  ensureHistogramsIsMutable();
                  histograms_.add(m);
                } else {
                  histogramsBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                io.prometheus.write.v2.Types.Exemplar m =
                    input.readMessage(
                        io.prometheus.write.v2.Types.Exemplar.parser(),
                        extensionRegistry);
                if (exemplarsBuilder_ == null) {
                  ensureExemplarsIsMutable();
                  exemplars_.add(m);
                } else {
                  exemplarsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    internalGetMetadataFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                createdTimestamp_ = input.readInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList labelsRefs_ = emptyIntList();
      private void ensureLabelsRefsIsMutable() {
        if (!labelsRefs_.isModifiable()) {
          labelsRefs_ = makeMutableCopy(labelsRefs_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @return A list containing the labelsRefs.
       */
      public java.util.List<java.lang.Integer>
          getLabelsRefsList() {
        labelsRefs_.makeImmutable();
        return labelsRefs_;
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @return The count of labelsRefs.
       */
      public int getLabelsRefsCount() {
        return labelsRefs_.size();
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param index The index of the element to return.
       * @return The labelsRefs at the given index.
       */
      public int getLabelsRefs(int index) {
        return labelsRefs_.getInt(index);
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param index The index to set the value at.
       * @param value The labelsRefs to set.
       * @return This builder for chaining.
       */
      public Builder setLabelsRefs(
          int index, int value) {

        ensureLabelsRefsIsMutable();
        labelsRefs_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param value The labelsRefs to add.
       * @return This builder for chaining.
       */
      public Builder addLabelsRefs(int value) {

        ensureLabelsRefsIsMutable();
        labelsRefs_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param values The labelsRefs to add.
       * @return This builder for chaining.
       */
      public Builder addAllLabelsRefs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLabelsRefsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, labelsRefs_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * labels_refs is a list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's length is always
       * a multiple of two, and the underlying labels should be sorted lexicographically.
       *
       * Note that there might be multiple TimeSeries objects in the same
       * Requests with the same labels e.g. for different exemplars, metadata
       * or created timestamp.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabelsRefs() {
        labelsRefs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<io.prometheus.write.v2.Types.Sample> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          samples_ = new java.util.ArrayList<io.prometheus.write.v2.Types.Sample>(samples_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.Sample, io.prometheus.write.v2.Types.Sample.Builder, io.prometheus.write.v2.Types.SampleOrBuilder> samplesBuilder_;

      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.Sample> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public io.prometheus.write.v2.Types.Sample getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder setSamples(
          int index, io.prometheus.write.v2.Types.Sample value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder setSamples(
          int index, io.prometheus.write.v2.Types.Sample.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder addSamples(io.prometheus.write.v2.Types.Sample value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder addSamples(
          int index, io.prometheus.write.v2.Types.Sample value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder addSamples(
          io.prometheus.write.v2.Types.Sample.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder addSamples(
          int index, io.prometheus.write.v2.Types.Sample.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends io.prometheus.write.v2.Types.Sample> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public io.prometheus.write.v2.Types.Sample.Builder getSamplesBuilder(
          int index) {
        return internalGetSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public io.prometheus.write.v2.Types.SampleOrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public java.util.List<? extends io.prometheus.write.v2.Types.SampleOrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public io.prometheus.write.v2.Types.Sample.Builder addSamplesBuilder() {
        return internalGetSamplesFieldBuilder().addBuilder(
            io.prometheus.write.v2.Types.Sample.getDefaultInstance());
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public io.prometheus.write.v2.Types.Sample.Builder addSamplesBuilder(
          int index) {
        return internalGetSamplesFieldBuilder().addBuilder(
            index, io.prometheus.write.v2.Types.Sample.getDefaultInstance());
      }
      /**
       * <pre>
       * Timeseries messages can either specify samples or (native) histogram samples
       * (histogram field), but not both. For a typical sender (real-time metric
       * streaming), in healthy cases, there will be only one sample or histogram.
       *
       * Samples and histograms are sorted by timestamp (older first).
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Sample samples = 2;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.Sample.Builder> 
           getSamplesBuilderList() {
        return internalGetSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.Sample, io.prometheus.write.v2.Types.Sample.Builder, io.prometheus.write.v2.Types.SampleOrBuilder> 
          internalGetSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.prometheus.write.v2.Types.Sample, io.prometheus.write.v2.Types.Sample.Builder, io.prometheus.write.v2.Types.SampleOrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      private java.util.List<io.prometheus.write.v2.Types.Histogram> histograms_ =
        java.util.Collections.emptyList();
      private void ensureHistogramsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          histograms_ = new java.util.ArrayList<io.prometheus.write.v2.Types.Histogram>(histograms_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.Histogram, io.prometheus.write.v2.Types.Histogram.Builder, io.prometheus.write.v2.Types.HistogramOrBuilder> histogramsBuilder_;

      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.Histogram> getHistogramsList() {
        if (histogramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(histograms_);
        } else {
          return histogramsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public int getHistogramsCount() {
        if (histogramsBuilder_ == null) {
          return histograms_.size();
        } else {
          return histogramsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public io.prometheus.write.v2.Types.Histogram getHistograms(int index) {
        if (histogramsBuilder_ == null) {
          return histograms_.get(index);
        } else {
          return histogramsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder setHistograms(
          int index, io.prometheus.write.v2.Types.Histogram value) {
        if (histogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistogramsIsMutable();
          histograms_.set(index, value);
          onChanged();
        } else {
          histogramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder setHistograms(
          int index, io.prometheus.write.v2.Types.Histogram.Builder builderForValue) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.set(index, builderForValue.build());
          onChanged();
        } else {
          histogramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder addHistograms(io.prometheus.write.v2.Types.Histogram value) {
        if (histogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistogramsIsMutable();
          histograms_.add(value);
          onChanged();
        } else {
          histogramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder addHistograms(
          int index, io.prometheus.write.v2.Types.Histogram value) {
        if (histogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistogramsIsMutable();
          histograms_.add(index, value);
          onChanged();
        } else {
          histogramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder addHistograms(
          io.prometheus.write.v2.Types.Histogram.Builder builderForValue) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.add(builderForValue.build());
          onChanged();
        } else {
          histogramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder addHistograms(
          int index, io.prometheus.write.v2.Types.Histogram.Builder builderForValue) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.add(index, builderForValue.build());
          onChanged();
        } else {
          histogramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder addAllHistograms(
          java.lang.Iterable<? extends io.prometheus.write.v2.Types.Histogram> values) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, histograms_);
          onChanged();
        } else {
          histogramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder clearHistograms() {
        if (histogramsBuilder_ == null) {
          histograms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          histogramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public Builder removeHistograms(int index) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.remove(index);
          onChanged();
        } else {
          histogramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public io.prometheus.write.v2.Types.Histogram.Builder getHistogramsBuilder(
          int index) {
        return internalGetHistogramsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public io.prometheus.write.v2.Types.HistogramOrBuilder getHistogramsOrBuilder(
          int index) {
        if (histogramsBuilder_ == null) {
          return histograms_.get(index);  } else {
          return histogramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public java.util.List<? extends io.prometheus.write.v2.Types.HistogramOrBuilder> 
           getHistogramsOrBuilderList() {
        if (histogramsBuilder_ != null) {
          return histogramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(histograms_);
        }
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public io.prometheus.write.v2.Types.Histogram.Builder addHistogramsBuilder() {
        return internalGetHistogramsFieldBuilder().addBuilder(
            io.prometheus.write.v2.Types.Histogram.getDefaultInstance());
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public io.prometheus.write.v2.Types.Histogram.Builder addHistogramsBuilder(
          int index) {
        return internalGetHistogramsFieldBuilder().addBuilder(
            index, io.prometheus.write.v2.Types.Histogram.getDefaultInstance());
      }
      /**
       * <code>repeated .io.prometheus.write.v2.Histogram histograms = 3;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.Histogram.Builder> 
           getHistogramsBuilderList() {
        return internalGetHistogramsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.Histogram, io.prometheus.write.v2.Types.Histogram.Builder, io.prometheus.write.v2.Types.HistogramOrBuilder> 
          internalGetHistogramsFieldBuilder() {
        if (histogramsBuilder_ == null) {
          histogramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.prometheus.write.v2.Types.Histogram, io.prometheus.write.v2.Types.Histogram.Builder, io.prometheus.write.v2.Types.HistogramOrBuilder>(
                  histograms_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          histograms_ = null;
        }
        return histogramsBuilder_;
      }

      private java.util.List<io.prometheus.write.v2.Types.Exemplar> exemplars_ =
        java.util.Collections.emptyList();
      private void ensureExemplarsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          exemplars_ = new java.util.ArrayList<io.prometheus.write.v2.Types.Exemplar>(exemplars_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.Exemplar, io.prometheus.write.v2.Types.Exemplar.Builder, io.prometheus.write.v2.Types.ExemplarOrBuilder> exemplarsBuilder_;

      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.Exemplar> getExemplarsList() {
        if (exemplarsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exemplars_);
        } else {
          return exemplarsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public int getExemplarsCount() {
        if (exemplarsBuilder_ == null) {
          return exemplars_.size();
        } else {
          return exemplarsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public io.prometheus.write.v2.Types.Exemplar getExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);
        } else {
          return exemplarsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder setExemplars(
          int index, io.prometheus.write.v2.Types.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.set(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder setExemplars(
          int index, io.prometheus.write.v2.Types.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.set(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder addExemplars(io.prometheus.write.v2.Types.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder addExemplars(
          int index, io.prometheus.write.v2.Types.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder addExemplars(
          io.prometheus.write.v2.Types.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder addExemplars(
          int index, io.prometheus.write.v2.Types.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder addAllExemplars(
          java.lang.Iterable<? extends io.prometheus.write.v2.Types.Exemplar> values) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exemplars_);
          onChanged();
        } else {
          exemplarsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder clearExemplars() {
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public Builder removeExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.remove(index);
          onChanged();
        } else {
          exemplarsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public io.prometheus.write.v2.Types.Exemplar.Builder getExemplarsBuilder(
          int index) {
        return internalGetExemplarsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public io.prometheus.write.v2.Types.ExemplarOrBuilder getExemplarsOrBuilder(
          int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);  } else {
          return exemplarsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public java.util.List<? extends io.prometheus.write.v2.Types.ExemplarOrBuilder> 
           getExemplarsOrBuilderList() {
        if (exemplarsBuilder_ != null) {
          return exemplarsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exemplars_);
        }
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public io.prometheus.write.v2.Types.Exemplar.Builder addExemplarsBuilder() {
        return internalGetExemplarsFieldBuilder().addBuilder(
            io.prometheus.write.v2.Types.Exemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public io.prometheus.write.v2.Types.Exemplar.Builder addExemplarsBuilder(
          int index) {
        return internalGetExemplarsFieldBuilder().addBuilder(
            index, io.prometheus.write.v2.Types.Exemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * exemplars represents an optional set of exemplars attached to this series' samples.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.Exemplar exemplars = 4;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.Exemplar.Builder> 
           getExemplarsBuilderList() {
        return internalGetExemplarsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.Exemplar, io.prometheus.write.v2.Types.Exemplar.Builder, io.prometheus.write.v2.Types.ExemplarOrBuilder> 
          internalGetExemplarsFieldBuilder() {
        if (exemplarsBuilder_ == null) {
          exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.prometheus.write.v2.Types.Exemplar, io.prometheus.write.v2.Types.Exemplar.Builder, io.prometheus.write.v2.Types.ExemplarOrBuilder>(
                  exemplars_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          exemplars_ = null;
        }
        return exemplarsBuilder_;
      }

      private io.prometheus.write.v2.Types.Metadata metadata_;
      private com.google.protobuf.SingleFieldBuilder<
          io.prometheus.write.v2.Types.Metadata, io.prometheus.write.v2.Types.Metadata.Builder, io.prometheus.write.v2.Types.MetadataOrBuilder> metadataBuilder_;
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       * @return Whether the metadata field is set.
       */
      public boolean hasMetadata() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       * @return The metadata.
       */
      public io.prometheus.write.v2.Types.Metadata getMetadata() {
        if (metadataBuilder_ == null) {
          return metadata_ == null ? io.prometheus.write.v2.Types.Metadata.getDefaultInstance() : metadata_;
        } else {
          return metadataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      public Builder setMetadata(io.prometheus.write.v2.Types.Metadata value) {
        if (metadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadata_ = value;
        } else {
          metadataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      public Builder setMetadata(
          io.prometheus.write.v2.Types.Metadata.Builder builderForValue) {
        if (metadataBuilder_ == null) {
          metadata_ = builderForValue.build();
        } else {
          metadataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      public Builder mergeMetadata(io.prometheus.write.v2.Types.Metadata value) {
        if (metadataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            metadata_ != null &&
            metadata_ != io.prometheus.write.v2.Types.Metadata.getDefaultInstance()) {
            getMetadataBuilder().mergeFrom(value);
          } else {
            metadata_ = value;
          }
        } else {
          metadataBuilder_.mergeFrom(value);
        }
        if (metadata_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      public Builder clearMetadata() {
        bitField0_ = (bitField0_ & ~0x00000010);
        metadata_ = null;
        if (metadataBuilder_ != null) {
          metadataBuilder_.dispose();
          metadataBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      public io.prometheus.write.v2.Types.Metadata.Builder getMetadataBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return internalGetMetadataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      public io.prometheus.write.v2.Types.MetadataOrBuilder getMetadataOrBuilder() {
        if (metadataBuilder_ != null) {
          return metadataBuilder_.getMessageOrBuilder();
        } else {
          return metadata_ == null ?
              io.prometheus.write.v2.Types.Metadata.getDefaultInstance() : metadata_;
        }
      }
      /**
       * <pre>
       * metadata represents the metadata associated with the given series' samples.
       * </pre>
       *
       * <code>.io.prometheus.write.v2.Metadata metadata = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.prometheus.write.v2.Types.Metadata, io.prometheus.write.v2.Types.Metadata.Builder, io.prometheus.write.v2.Types.MetadataOrBuilder> 
          internalGetMetadataFieldBuilder() {
        if (metadataBuilder_ == null) {
          metadataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.prometheus.write.v2.Types.Metadata, io.prometheus.write.v2.Types.Metadata.Builder, io.prometheus.write.v2.Types.MetadataOrBuilder>(
                  getMetadata(),
                  getParentForChildren(),
                  isClean());
          metadata_ = null;
        }
        return metadataBuilder_;
      }

      private long createdTimestamp_ ;
      /**
       * <pre>
       * created_timestamp represents an optional created timestamp associated with
       * this series' samples in ms format, typically for counter or histogram type
       * metrics. Created timestamp represents the time when the counter started
       * counting (sometimes referred to as start timestamp), which can increase
       * the accuracy of query results.
       *
       * Note that some receivers might require this and in return fail to
       * ingest such samples within the Request.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       *
       * Note that the "optional" keyword is omitted due to
       * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
       * Zero value means value not set. If you need to use exactly zero value for
       * the timestamp, use 1 millisecond before or after.
       * </pre>
       *
       * <code>int64 created_timestamp = 6;</code>
       * @return The createdTimestamp.
       */
      @java.lang.Override
      public long getCreatedTimestamp() {
        return createdTimestamp_;
      }
      /**
       * <pre>
       * created_timestamp represents an optional created timestamp associated with
       * this series' samples in ms format, typically for counter or histogram type
       * metrics. Created timestamp represents the time when the counter started
       * counting (sometimes referred to as start timestamp), which can increase
       * the accuracy of query results.
       *
       * Note that some receivers might require this and in return fail to
       * ingest such samples within the Request.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       *
       * Note that the "optional" keyword is omitted due to
       * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
       * Zero value means value not set. If you need to use exactly zero value for
       * the timestamp, use 1 millisecond before or after.
       * </pre>
       *
       * <code>int64 created_timestamp = 6;</code>
       * @param value The createdTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setCreatedTimestamp(long value) {

        createdTimestamp_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * created_timestamp represents an optional created timestamp associated with
       * this series' samples in ms format, typically for counter or histogram type
       * metrics. Created timestamp represents the time when the counter started
       * counting (sometimes referred to as start timestamp), which can increase
       * the accuracy of query results.
       *
       * Note that some receivers might require this and in return fail to
       * ingest such samples within the Request.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       *
       * Note that the "optional" keyword is omitted due to
       * https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
       * Zero value means value not set. If you need to use exactly zero value for
       * the timestamp, use 1 millisecond before or after.
       * </pre>
       *
       * <code>int64 created_timestamp = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearCreatedTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000020);
        createdTimestamp_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.TimeSeries)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.TimeSeries)
    private static final io.prometheus.write.v2.Types.TimeSeries DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.prometheus.write.v2.Types.TimeSeries();
    }

    public static io.prometheus.write.v2.Types.TimeSeries getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TimeSeries>
        PARSER = new com.google.protobuf.AbstractParser<TimeSeries>() {
      @java.lang.Override
      public TimeSeries parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimeSeries> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimeSeries> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.prometheus.write.v2.Types.TimeSeries getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExemplarOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.Exemplar)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * labels_refs is an optional list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's len is always
     * a multiple of 2, and the underlying labels should be sorted lexicographically.
     * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return A list containing the labelsRefs.
     */
    java.util.List<java.lang.Integer> getLabelsRefsList();
    /**
     * <pre>
     * labels_refs is an optional list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's len is always
     * a multiple of 2, and the underlying labels should be sorted lexicographically.
     * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return The count of labelsRefs.
     */
    int getLabelsRefsCount();
    /**
     * <pre>
     * labels_refs is an optional list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's len is always
     * a multiple of 2, and the underlying labels should be sorted lexicographically.
     * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @param index The index of the element to return.
     * @return The labelsRefs at the given index.
     */
    int getLabelsRefs(int index);

    /**
     * <pre>
     * value represents an exact example value. This can be useful when the exemplar
     * is attached to a histogram, which only gives an estimated value through buckets.
     * </pre>
     *
     * <code>double value = 2;</code>
     * @return The value.
     */
    double getValue();

    /**
     * <pre>
     * timestamp represents the timestamp of the exemplar in ms.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     * </pre>
     *
     * <code>int64 timestamp = 3;</code>
     * @return The timestamp.
     */
    long getTimestamp();
  }
  /**
   * <pre>
   * Exemplar is an additional information attached to some series' samples.
   * It is typically used to attach an example trace or request ID associated with
   * the metric changes.
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.Exemplar}
   */
  public static final class Exemplar extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.Exemplar)
      ExemplarOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        Exemplar.class.getName());
    }
    // Use Exemplar.newBuilder() to construct.
    private Exemplar(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Exemplar() {
      labelsRefs_ = emptyIntList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Exemplar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Exemplar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.prometheus.write.v2.Types.Exemplar.class, io.prometheus.write.v2.Types.Exemplar.Builder.class);
    }

    public static final int LABELS_REFS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList labelsRefs_ =
        emptyIntList();
    /**
     * <pre>
     * labels_refs is an optional list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's len is always
     * a multiple of 2, and the underlying labels should be sorted lexicographically.
     * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return A list containing the labelsRefs.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getLabelsRefsList() {
      return labelsRefs_;
    }
    /**
     * <pre>
     * labels_refs is an optional list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's len is always
     * a multiple of 2, and the underlying labels should be sorted lexicographically.
     * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @return The count of labelsRefs.
     */
    public int getLabelsRefsCount() {
      return labelsRefs_.size();
    }
    /**
     * <pre>
     * labels_refs is an optional list of label name-value pair references, encoded
     * as indices to the Request.symbols array. This list's len is always
     * a multiple of 2, and the underlying labels should be sorted lexicographically.
     * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
     * </pre>
     *
     * <code>repeated uint32 labels_refs = 1;</code>
     * @param index The index of the element to return.
     * @return The labelsRefs at the given index.
     */
    public int getLabelsRefs(int index) {
      return labelsRefs_.getInt(index);
    }
    private int labelsRefsMemoizedSerializedSize = -1;

    public static final int VALUE_FIELD_NUMBER = 2;
    private double value_ = 0D;
    /**
     * <pre>
     * value represents an exact example value. This can be useful when the exemplar
     * is attached to a histogram, which only gives an estimated value through buckets.
     * </pre>
     *
     * <code>double value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public double getValue() {
      return value_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_ = 0L;
    /**
     * <pre>
     * timestamp represents the timestamp of the exemplar in ms.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     * </pre>
     *
     * <code>int64 timestamp = 3;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getLabelsRefsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(labelsRefsMemoizedSerializedSize);
      }
      for (int i = 0; i < labelsRefs_.size(); i++) {
        output.writeUInt32NoTag(labelsRefs_.getInt(i));
      }
      if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
        output.writeDouble(2, value_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(3, timestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < labelsRefs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(labelsRefs_.getInt(i));
        }
        size += dataSize;
        if (!getLabelsRefsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        labelsRefsMemoizedSerializedSize = dataSize;
      }
      if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, value_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.prometheus.write.v2.Types.Exemplar)) {
        return super.equals(obj);
      }
      io.prometheus.write.v2.Types.Exemplar other = (io.prometheus.write.v2.Types.Exemplar) obj;

      if (!getLabelsRefsList()
          .equals(other.getLabelsRefsList())) return false;
      if (java.lang.Double.doubleToLongBits(getValue())
          != java.lang.Double.doubleToLongBits(
              other.getValue())) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsRefsCount() > 0) {
        hash = (37 * hash) + LABELS_REFS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsRefsList().hashCode();
      }
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getValue()));
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.prometheus.write.v2.Types.Exemplar parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.prometheus.write.v2.Types.Exemplar parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Exemplar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.prometheus.write.v2.Types.Exemplar prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Exemplar is an additional information attached to some series' samples.
     * It is typically used to attach an example trace or request ID associated with
     * the metric changes.
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.Exemplar}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.Exemplar)
        io.prometheus.write.v2.Types.ExemplarOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Exemplar_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Exemplar_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.prometheus.write.v2.Types.Exemplar.class, io.prometheus.write.v2.Types.Exemplar.Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.Exemplar.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        labelsRefs_ = emptyIntList();
        value_ = 0D;
        timestamp_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Exemplar_descriptor;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Exemplar getDefaultInstanceForType() {
        return io.prometheus.write.v2.Types.Exemplar.getDefaultInstance();
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Exemplar build() {
        io.prometheus.write.v2.Types.Exemplar result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Exemplar buildPartial() {
        io.prometheus.write.v2.Types.Exemplar result = new io.prometheus.write.v2.Types.Exemplar(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.prometheus.write.v2.Types.Exemplar result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          labelsRefs_.makeImmutable();
          result.labelsRefs_ = labelsRefs_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = value_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.timestamp_ = timestamp_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.prometheus.write.v2.Types.Exemplar) {
          return mergeFrom((io.prometheus.write.v2.Types.Exemplar)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.prometheus.write.v2.Types.Exemplar other) {
        if (other == io.prometheus.write.v2.Types.Exemplar.getDefaultInstance()) return this;
        if (!other.labelsRefs_.isEmpty()) {
          if (labelsRefs_.isEmpty()) {
            labelsRefs_ = other.labelsRefs_;
            labelsRefs_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureLabelsRefsIsMutable();
            labelsRefs_.addAll(other.labelsRefs_);
          }
          onChanged();
        }
        if (java.lang.Double.doubleToRawLongBits(other.getValue()) != 0) {
          setValue(other.getValue());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readUInt32();
                ensureLabelsRefsIsMutable();
                labelsRefs_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureLabelsRefsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  labelsRefs_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 17: {
                value_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 24: {
                timestamp_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList labelsRefs_ = emptyIntList();
      private void ensureLabelsRefsIsMutable() {
        if (!labelsRefs_.isModifiable()) {
          labelsRefs_ = makeMutableCopy(labelsRefs_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @return A list containing the labelsRefs.
       */
      public java.util.List<java.lang.Integer>
          getLabelsRefsList() {
        labelsRefs_.makeImmutable();
        return labelsRefs_;
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @return The count of labelsRefs.
       */
      public int getLabelsRefsCount() {
        return labelsRefs_.size();
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param index The index of the element to return.
       * @return The labelsRefs at the given index.
       */
      public int getLabelsRefs(int index) {
        return labelsRefs_.getInt(index);
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param index The index to set the value at.
       * @param value The labelsRefs to set.
       * @return This builder for chaining.
       */
      public Builder setLabelsRefs(
          int index, int value) {

        ensureLabelsRefsIsMutable();
        labelsRefs_.setInt(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param value The labelsRefs to add.
       * @return This builder for chaining.
       */
      public Builder addLabelsRefs(int value) {

        ensureLabelsRefsIsMutable();
        labelsRefs_.addInt(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @param values The labelsRefs to add.
       * @return This builder for chaining.
       */
      public Builder addAllLabelsRefs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLabelsRefsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, labelsRefs_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * labels_refs is an optional list of label name-value pair references, encoded
       * as indices to the Request.symbols array. This list's len is always
       * a multiple of 2, and the underlying labels should be sorted lexicographically.
       * If the exemplar references a trace it should use the `trace_id` label name, as a best practice.
       * </pre>
       *
       * <code>repeated uint32 labels_refs = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabelsRefs() {
        labelsRefs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private double value_ ;
      /**
       * <pre>
       * value represents an exact example value. This can be useful when the exemplar
       * is attached to a histogram, which only gives an estimated value through buckets.
       * </pre>
       *
       * <code>double value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public double getValue() {
        return value_;
      }
      /**
       * <pre>
       * value represents an exact example value. This can be useful when the exemplar
       * is attached to a histogram, which only gives an estimated value through buckets.
       * </pre>
       *
       * <code>double value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(double value) {

        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * value represents an exact example value. This can be useful when the exemplar
       * is attached to a histogram, which only gives an estimated value through buckets.
       * </pre>
       *
       * <code>double value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0D;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * timestamp represents the timestamp of the exemplar in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * timestamp represents the timestamp of the exemplar in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {

        timestamp_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * timestamp represents the timestamp of the exemplar in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.Exemplar)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.Exemplar)
    private static final io.prometheus.write.v2.Types.Exemplar DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.prometheus.write.v2.Types.Exemplar();
    }

    public static io.prometheus.write.v2.Types.Exemplar getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exemplar>
        PARSER = new com.google.protobuf.AbstractParser<Exemplar>() {
      @java.lang.Override
      public Exemplar parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Exemplar> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exemplar> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.prometheus.write.v2.Types.Exemplar getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SampleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.Sample)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * value of the sample.
     * </pre>
     *
     * <code>double value = 1;</code>
     * @return The value.
     */
    double getValue();

    /**
     * <pre>
     * timestamp represents timestamp of the sample in ms.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     * </pre>
     *
     * <code>int64 timestamp = 2;</code>
     * @return The timestamp.
     */
    long getTimestamp();
  }
  /**
   * <pre>
   * Sample represents series sample.
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.Sample}
   */
  public static final class Sample extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.Sample)
      SampleOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        Sample.class.getName());
    }
    // Use Sample.newBuilder() to construct.
    private Sample(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Sample() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Sample_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Sample_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.prometheus.write.v2.Types.Sample.class, io.prometheus.write.v2.Types.Sample.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private double value_ = 0D;
    /**
     * <pre>
     * value of the sample.
     * </pre>
     *
     * <code>double value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public double getValue() {
      return value_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 2;
    private long timestamp_ = 0L;
    /**
     * <pre>
     * timestamp represents timestamp of the sample in ms.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     * </pre>
     *
     * <code>int64 timestamp = 2;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
        output.writeDouble(1, value_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(2, timestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, value_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, timestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.prometheus.write.v2.Types.Sample)) {
        return super.equals(obj);
      }
      io.prometheus.write.v2.Types.Sample other = (io.prometheus.write.v2.Types.Sample) obj;

      if (java.lang.Double.doubleToLongBits(getValue())
          != java.lang.Double.doubleToLongBits(
              other.getValue())) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getValue()));
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.prometheus.write.v2.Types.Sample parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.prometheus.write.v2.Types.Sample parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.prometheus.write.v2.Types.Sample parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Sample parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.prometheus.write.v2.Types.Sample prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Sample represents series sample.
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.Sample}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.Sample)
        io.prometheus.write.v2.Types.SampleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Sample_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Sample_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.prometheus.write.v2.Types.Sample.class, io.prometheus.write.v2.Types.Sample.Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.Sample.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        value_ = 0D;
        timestamp_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Sample_descriptor;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Sample getDefaultInstanceForType() {
        return io.prometheus.write.v2.Types.Sample.getDefaultInstance();
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Sample build() {
        io.prometheus.write.v2.Types.Sample result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Sample buildPartial() {
        io.prometheus.write.v2.Types.Sample result = new io.prometheus.write.v2.Types.Sample(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.prometheus.write.v2.Types.Sample result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.value_ = value_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.timestamp_ = timestamp_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.prometheus.write.v2.Types.Sample) {
          return mergeFrom((io.prometheus.write.v2.Types.Sample)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.prometheus.write.v2.Types.Sample other) {
        if (other == io.prometheus.write.v2.Types.Sample.getDefaultInstance()) return this;
        if (java.lang.Double.doubleToRawLongBits(other.getValue()) != 0) {
          setValue(other.getValue());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                value_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 16: {
                timestamp_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double value_ ;
      /**
       * <pre>
       * value of the sample.
       * </pre>
       *
       * <code>double value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public double getValue() {
        return value_;
      }
      /**
       * <pre>
       * value of the sample.
       * </pre>
       *
       * <code>double value = 1;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(double value) {

        value_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * value of the sample.
       * </pre>
       *
       * <code>double value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0D;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * timestamp represents timestamp of the sample in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 2;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * timestamp represents timestamp of the sample in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 2;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {

        timestamp_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * timestamp represents timestamp of the sample in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.Sample)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.Sample)
    private static final io.prometheus.write.v2.Types.Sample DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.prometheus.write.v2.Types.Sample();
    }

    public static io.prometheus.write.v2.Types.Sample getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Sample>
        PARSER = new com.google.protobuf.AbstractParser<Sample>() {
      @java.lang.Override
      public Sample parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Sample> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sample> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.prometheus.write.v2.Types.Sample getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.Metadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
     * @return The type.
     */
    io.prometheus.write.v2.Types.Metadata.MetricType getType();

    /**
     * <pre>
     * help_ref is a reference to the Request.symbols array representing help
     * text for the metric. Help is optional, reference should point to an empty string in
     * such a case.
     * </pre>
     *
     * <code>uint32 help_ref = 3;</code>
     * @return The helpRef.
     */
    int getHelpRef();

    /**
     * <pre>
     * unit_ref is a reference to the Request.symbols array representing a unit
     * for the metric. Unit is optional, reference should point to an empty string in
     * such a case.
     * </pre>
     *
     * <code>uint32 unit_ref = 4;</code>
     * @return The unitRef.
     */
    int getUnitRef();
  }
  /**
   * <pre>
   * Metadata represents the metadata associated with the given series' samples.
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.Metadata}
   */
  public static final class Metadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.Metadata)
      MetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        Metadata.class.getName());
    }
    // Use Metadata.newBuilder() to construct.
    private Metadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Metadata() {
      type_ = 0;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Metadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Metadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.prometheus.write.v2.Types.Metadata.class, io.prometheus.write.v2.Types.Metadata.Builder.class);
    }

    /**
     * Protobuf enum {@code io.prometheus.write.v2.Metadata.MetricType}
     */
    public enum MetricType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>METRIC_TYPE_UNSPECIFIED = 0;</code>
       */
      METRIC_TYPE_UNSPECIFIED(0),
      /**
       * <code>METRIC_TYPE_COUNTER = 1;</code>
       */
      METRIC_TYPE_COUNTER(1),
      /**
       * <code>METRIC_TYPE_GAUGE = 2;</code>
       */
      METRIC_TYPE_GAUGE(2),
      /**
       * <code>METRIC_TYPE_HISTOGRAM = 3;</code>
       */
      METRIC_TYPE_HISTOGRAM(3),
      /**
       * <code>METRIC_TYPE_GAUGEHISTOGRAM = 4;</code>
       */
      METRIC_TYPE_GAUGEHISTOGRAM(4),
      /**
       * <code>METRIC_TYPE_SUMMARY = 5;</code>
       */
      METRIC_TYPE_SUMMARY(5),
      /**
       * <code>METRIC_TYPE_INFO = 6;</code>
       */
      METRIC_TYPE_INFO(6),
      /**
       * <code>METRIC_TYPE_STATESET = 7;</code>
       */
      METRIC_TYPE_STATESET(7),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 31,
          /* patch= */ 1,
          /* suffix= */ "",
          MetricType.class.getName());
      }
      /**
       * <code>METRIC_TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int METRIC_TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>METRIC_TYPE_COUNTER = 1;</code>
       */
      public static final int METRIC_TYPE_COUNTER_VALUE = 1;
      /**
       * <code>METRIC_TYPE_GAUGE = 2;</code>
       */
      public static final int METRIC_TYPE_GAUGE_VALUE = 2;
      /**
       * <code>METRIC_TYPE_HISTOGRAM = 3;</code>
       */
      public static final int METRIC_TYPE_HISTOGRAM_VALUE = 3;
      /**
       * <code>METRIC_TYPE_GAUGEHISTOGRAM = 4;</code>
       */
      public static final int METRIC_TYPE_GAUGEHISTOGRAM_VALUE = 4;
      /**
       * <code>METRIC_TYPE_SUMMARY = 5;</code>
       */
      public static final int METRIC_TYPE_SUMMARY_VALUE = 5;
      /**
       * <code>METRIC_TYPE_INFO = 6;</code>
       */
      public static final int METRIC_TYPE_INFO_VALUE = 6;
      /**
       * <code>METRIC_TYPE_STATESET = 7;</code>
       */
      public static final int METRIC_TYPE_STATESET_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MetricType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static MetricType forNumber(int value) {
        switch (value) {
          case 0: return METRIC_TYPE_UNSPECIFIED;
          case 1: return METRIC_TYPE_COUNTER;
          case 2: return METRIC_TYPE_GAUGE;
          case 3: return METRIC_TYPE_HISTOGRAM;
          case 4: return METRIC_TYPE_GAUGEHISTOGRAM;
          case 5: return METRIC_TYPE_SUMMARY;
          case 6: return METRIC_TYPE_INFO;
          case 7: return METRIC_TYPE_STATESET;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MetricType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MetricType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MetricType>() {
              public MetricType findValueByNumber(int number) {
                return MetricType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.Metadata.getDescriptor().getEnumTypes().get(0);
      }

      private static final MetricType[] VALUES = values();

      public static MetricType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MetricType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:io.prometheus.write.v2.Metadata.MetricType)
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public io.prometheus.write.v2.Types.Metadata.MetricType getType() {
      io.prometheus.write.v2.Types.Metadata.MetricType result = io.prometheus.write.v2.Types.Metadata.MetricType.forNumber(type_);
      return result == null ? io.prometheus.write.v2.Types.Metadata.MetricType.UNRECOGNIZED : result;
    }

    public static final int HELP_REF_FIELD_NUMBER = 3;
    private int helpRef_ = 0;
    /**
     * <pre>
     * help_ref is a reference to the Request.symbols array representing help
     * text for the metric. Help is optional, reference should point to an empty string in
     * such a case.
     * </pre>
     *
     * <code>uint32 help_ref = 3;</code>
     * @return The helpRef.
     */
    @java.lang.Override
    public int getHelpRef() {
      return helpRef_;
    }

    public static final int UNIT_REF_FIELD_NUMBER = 4;
    private int unitRef_ = 0;
    /**
     * <pre>
     * unit_ref is a reference to the Request.symbols array representing a unit
     * for the metric. Unit is optional, reference should point to an empty string in
     * such a case.
     * </pre>
     *
     * <code>uint32 unit_ref = 4;</code>
     * @return The unitRef.
     */
    @java.lang.Override
    public int getUnitRef() {
      return unitRef_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != io.prometheus.write.v2.Types.Metadata.MetricType.METRIC_TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (helpRef_ != 0) {
        output.writeUInt32(3, helpRef_);
      }
      if (unitRef_ != 0) {
        output.writeUInt32(4, unitRef_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != io.prometheus.write.v2.Types.Metadata.MetricType.METRIC_TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (helpRef_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, helpRef_);
      }
      if (unitRef_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, unitRef_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.prometheus.write.v2.Types.Metadata)) {
        return super.equals(obj);
      }
      io.prometheus.write.v2.Types.Metadata other = (io.prometheus.write.v2.Types.Metadata) obj;

      if (type_ != other.type_) return false;
      if (getHelpRef()
          != other.getHelpRef()) return false;
      if (getUnitRef()
          != other.getUnitRef()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + HELP_REF_FIELD_NUMBER;
      hash = (53 * hash) + getHelpRef();
      hash = (37 * hash) + UNIT_REF_FIELD_NUMBER;
      hash = (53 * hash) + getUnitRef();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.prometheus.write.v2.Types.Metadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.prometheus.write.v2.Types.Metadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.prometheus.write.v2.Types.Metadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata represents the metadata associated with the given series' samples.
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.Metadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.Metadata)
        io.prometheus.write.v2.Types.MetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Metadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Metadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.prometheus.write.v2.Types.Metadata.class, io.prometheus.write.v2.Types.Metadata.Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.Metadata.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        helpRef_ = 0;
        unitRef_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Metadata_descriptor;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Metadata getDefaultInstanceForType() {
        return io.prometheus.write.v2.Types.Metadata.getDefaultInstance();
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Metadata build() {
        io.prometheus.write.v2.Types.Metadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Metadata buildPartial() {
        io.prometheus.write.v2.Types.Metadata result = new io.prometheus.write.v2.Types.Metadata(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.prometheus.write.v2.Types.Metadata result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.helpRef_ = helpRef_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.unitRef_ = unitRef_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.prometheus.write.v2.Types.Metadata) {
          return mergeFrom((io.prometheus.write.v2.Types.Metadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.prometheus.write.v2.Types.Metadata other) {
        if (other == io.prometheus.write.v2.Types.Metadata.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getHelpRef() != 0) {
          setHelpRef(other.getHelpRef());
        }
        if (other.getUnitRef() != 0) {
          setUnitRef(other.getUnitRef());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 24: {
                helpRef_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 24
              case 32: {
                unitRef_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public io.prometheus.write.v2.Types.Metadata.MetricType getType() {
        io.prometheus.write.v2.Types.Metadata.MetricType result = io.prometheus.write.v2.Types.Metadata.MetricType.forNumber(type_);
        return result == null ? io.prometheus.write.v2.Types.Metadata.MetricType.UNRECOGNIZED : result;
      }
      /**
       * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(io.prometheus.write.v2.Types.Metadata.MetricType value) {
        if (value == null) { throw new NullPointerException(); }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.io.prometheus.write.v2.Metadata.MetricType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private int helpRef_ ;
      /**
       * <pre>
       * help_ref is a reference to the Request.symbols array representing help
       * text for the metric. Help is optional, reference should point to an empty string in
       * such a case.
       * </pre>
       *
       * <code>uint32 help_ref = 3;</code>
       * @return The helpRef.
       */
      @java.lang.Override
      public int getHelpRef() {
        return helpRef_;
      }
      /**
       * <pre>
       * help_ref is a reference to the Request.symbols array representing help
       * text for the metric. Help is optional, reference should point to an empty string in
       * such a case.
       * </pre>
       *
       * <code>uint32 help_ref = 3;</code>
       * @param value The helpRef to set.
       * @return This builder for chaining.
       */
      public Builder setHelpRef(int value) {

        helpRef_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * help_ref is a reference to the Request.symbols array representing help
       * text for the metric. Help is optional, reference should point to an empty string in
       * such a case.
       * </pre>
       *
       * <code>uint32 help_ref = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHelpRef() {
        bitField0_ = (bitField0_ & ~0x00000002);
        helpRef_ = 0;
        onChanged();
        return this;
      }

      private int unitRef_ ;
      /**
       * <pre>
       * unit_ref is a reference to the Request.symbols array representing a unit
       * for the metric. Unit is optional, reference should point to an empty string in
       * such a case.
       * </pre>
       *
       * <code>uint32 unit_ref = 4;</code>
       * @return The unitRef.
       */
      @java.lang.Override
      public int getUnitRef() {
        return unitRef_;
      }
      /**
       * <pre>
       * unit_ref is a reference to the Request.symbols array representing a unit
       * for the metric. Unit is optional, reference should point to an empty string in
       * such a case.
       * </pre>
       *
       * <code>uint32 unit_ref = 4;</code>
       * @param value The unitRef to set.
       * @return This builder for chaining.
       */
      public Builder setUnitRef(int value) {

        unitRef_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unit_ref is a reference to the Request.symbols array representing a unit
       * for the metric. Unit is optional, reference should point to an empty string in
       * such a case.
       * </pre>
       *
       * <code>uint32 unit_ref = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnitRef() {
        bitField0_ = (bitField0_ & ~0x00000004);
        unitRef_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.Metadata)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.Metadata)
    private static final io.prometheus.write.v2.Types.Metadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.prometheus.write.v2.Types.Metadata();
    }

    public static io.prometheus.write.v2.Types.Metadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Metadata>
        PARSER = new com.google.protobuf.AbstractParser<Metadata>() {
      @java.lang.Override
      public Metadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Metadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Metadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.prometheus.write.v2.Types.Metadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HistogramOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.Histogram)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 count_int = 1;</code>
     * @return Whether the countInt field is set.
     */
    boolean hasCountInt();
    /**
     * <code>uint64 count_int = 1;</code>
     * @return The countInt.
     */
    long getCountInt();

    /**
     * <code>double count_float = 2;</code>
     * @return Whether the countFloat field is set.
     */
    boolean hasCountFloat();
    /**
     * <code>double count_float = 2;</code>
     * @return The countFloat.
     */
    double getCountFloat();

    /**
     * <pre>
     * Sum of observations in the histogram.
     * </pre>
     *
     * <code>double sum = 3;</code>
     * @return The sum.
     */
    double getSum();

    /**
     * <pre>
     * The schema defines the bucket schema. Currently, valid numbers
     * are -53 and numbers in range of -4 &lt;= n &lt;= 8. More valid numbers might be
     * added in future for new bucketing layouts.
     *
     * The schema equal to -53 means custom buckets. See
     * custom_values field description for more details.
     *
     * Values between -4 and 8 represent base-2 bucket schema, where 1
     * is a bucket boundary in each case, and then each power of two is
     * divided into 2^n (n is schema value) logarithmic buckets. Or in other words,
     * each bucket boundary is the previous boundary times 2^(2^-n).
     * </pre>
     *
     * <code>sint32 schema = 4;</code>
     * @return The schema.
     */
    int getSchema();

    /**
     * <pre>
     * Breadth of the zero bucket.
     * </pre>
     *
     * <code>double zero_threshold = 5;</code>
     * @return The zeroThreshold.
     */
    double getZeroThreshold();

    /**
     * <code>uint64 zero_count_int = 6;</code>
     * @return Whether the zeroCountInt field is set.
     */
    boolean hasZeroCountInt();
    /**
     * <code>uint64 zero_count_int = 6;</code>
     * @return The zeroCountInt.
     */
    long getZeroCountInt();

    /**
     * <code>double zero_count_float = 7;</code>
     * @return Whether the zeroCountFloat field is set.
     */
    boolean hasZeroCountFloat();
    /**
     * <code>double zero_count_float = 7;</code>
     * @return The zeroCountFloat.
     */
    double getZeroCountFloat();

    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    java.util.List<io.prometheus.write.v2.Types.BucketSpan> 
        getNegativeSpansList();
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    io.prometheus.write.v2.Types.BucketSpan getNegativeSpans(int index);
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    int getNegativeSpansCount();
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    java.util.List<? extends io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
        getNegativeSpansOrBuilderList();
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    io.prometheus.write.v2.Types.BucketSpanOrBuilder getNegativeSpansOrBuilder(
        int index);

    /**
     * <pre>
     * Use either "negative_deltas" or "negative_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 negative_deltas = 9;</code>
     * @return A list containing the negativeDeltas.
     */
    java.util.List<java.lang.Long> getNegativeDeltasList();
    /**
     * <pre>
     * Use either "negative_deltas" or "negative_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 negative_deltas = 9;</code>
     * @return The count of negativeDeltas.
     */
    int getNegativeDeltasCount();
    /**
     * <pre>
     * Use either "negative_deltas" or "negative_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 negative_deltas = 9;</code>
     * @param index The index of the element to return.
     * @return The negativeDeltas at the given index.
     */
    long getNegativeDeltas(int index);

    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double negative_counts = 10;</code>
     * @return A list containing the negativeCounts.
     */
    java.util.List<java.lang.Double> getNegativeCountsList();
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double negative_counts = 10;</code>
     * @return The count of negativeCounts.
     */
    int getNegativeCountsCount();
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double negative_counts = 10;</code>
     * @param index The index of the element to return.
     * @return The negativeCounts at the given index.
     */
    double getNegativeCounts(int index);

    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    java.util.List<io.prometheus.write.v2.Types.BucketSpan> 
        getPositiveSpansList();
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    io.prometheus.write.v2.Types.BucketSpan getPositiveSpans(int index);
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    int getPositiveSpansCount();
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    java.util.List<? extends io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
        getPositiveSpansOrBuilderList();
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    io.prometheus.write.v2.Types.BucketSpanOrBuilder getPositiveSpansOrBuilder(
        int index);

    /**
     * <pre>
     * Use either "positive_deltas" or "positive_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 positive_deltas = 12;</code>
     * @return A list containing the positiveDeltas.
     */
    java.util.List<java.lang.Long> getPositiveDeltasList();
    /**
     * <pre>
     * Use either "positive_deltas" or "positive_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 positive_deltas = 12;</code>
     * @return The count of positiveDeltas.
     */
    int getPositiveDeltasCount();
    /**
     * <pre>
     * Use either "positive_deltas" or "positive_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 positive_deltas = 12;</code>
     * @param index The index of the element to return.
     * @return The positiveDeltas at the given index.
     */
    long getPositiveDeltas(int index);

    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double positive_counts = 13;</code>
     * @return A list containing the positiveCounts.
     */
    java.util.List<java.lang.Double> getPositiveCountsList();
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double positive_counts = 13;</code>
     * @return The count of positiveCounts.
     */
    int getPositiveCountsCount();
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double positive_counts = 13;</code>
     * @param index The index of the element to return.
     * @return The positiveCounts at the given index.
     */
    double getPositiveCounts(int index);

    /**
     * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
     * @return The enum numeric value on the wire for resetHint.
     */
    int getResetHintValue();
    /**
     * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
     * @return The resetHint.
     */
    io.prometheus.write.v2.Types.Histogram.ResetHint getResetHint();

    /**
     * <pre>
     * timestamp represents timestamp of the sample in ms.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     * </pre>
     *
     * <code>int64 timestamp = 15;</code>
     * @return The timestamp.
     */
    long getTimestamp();

    /**
     * <pre>
     * custom_values is an additional field used by non-exponential bucketing layouts.
     *
     * For custom buckets (-53 schema value) custom_values specify monotonically
     * increasing upper inclusive boundaries for the bucket counts with arbitrary
     * widths for this histogram. In other words, custom_values represents custom,
     * explicit bucketing that could have been converted from the classic histograms.
     *
     * Those bounds are then referenced by spans in positive_spans with corresponding positive
     * counts of deltas (refer to positive_spans for more details). This way we can
     * have encode sparse histograms with custom bucketing (many buckets are often
     * not used).
     *
     * Note that for custom bounds, even negative observations are placed in the positive
     * counts to simplify the implementation and avoid ambiguity of where to place
     * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
     * the zero bucket are unused, if the schema indicates custom bucketing.
     *
     * For each upper boundary the previous boundary represent the lower exclusive
     * boundary for that bucket. The first element is the upper inclusive boundary
     * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
     * This is similar to "le" label semantics on classic histograms. You may add a
     * bucket with an upper bound of 0 to make sure that you really have no negative
     * observations, but in practice, native histogram rendering will show both with
     * or without first upper boundary 0 and no negative counts as the same case.
     *
     * The last element is not only the upper inclusive bound of the last regular
     * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
     * </pre>
     *
     * <code>repeated double custom_values = 16;</code>
     * @return A list containing the customValues.
     */
    java.util.List<java.lang.Double> getCustomValuesList();
    /**
     * <pre>
     * custom_values is an additional field used by non-exponential bucketing layouts.
     *
     * For custom buckets (-53 schema value) custom_values specify monotonically
     * increasing upper inclusive boundaries for the bucket counts with arbitrary
     * widths for this histogram. In other words, custom_values represents custom,
     * explicit bucketing that could have been converted from the classic histograms.
     *
     * Those bounds are then referenced by spans in positive_spans with corresponding positive
     * counts of deltas (refer to positive_spans for more details). This way we can
     * have encode sparse histograms with custom bucketing (many buckets are often
     * not used).
     *
     * Note that for custom bounds, even negative observations are placed in the positive
     * counts to simplify the implementation and avoid ambiguity of where to place
     * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
     * the zero bucket are unused, if the schema indicates custom bucketing.
     *
     * For each upper boundary the previous boundary represent the lower exclusive
     * boundary for that bucket. The first element is the upper inclusive boundary
     * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
     * This is similar to "le" label semantics on classic histograms. You may add a
     * bucket with an upper bound of 0 to make sure that you really have no negative
     * observations, but in practice, native histogram rendering will show both with
     * or without first upper boundary 0 and no negative counts as the same case.
     *
     * The last element is not only the upper inclusive bound of the last regular
     * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
     * </pre>
     *
     * <code>repeated double custom_values = 16;</code>
     * @return The count of customValues.
     */
    int getCustomValuesCount();
    /**
     * <pre>
     * custom_values is an additional field used by non-exponential bucketing layouts.
     *
     * For custom buckets (-53 schema value) custom_values specify monotonically
     * increasing upper inclusive boundaries for the bucket counts with arbitrary
     * widths for this histogram. In other words, custom_values represents custom,
     * explicit bucketing that could have been converted from the classic histograms.
     *
     * Those bounds are then referenced by spans in positive_spans with corresponding positive
     * counts of deltas (refer to positive_spans for more details). This way we can
     * have encode sparse histograms with custom bucketing (many buckets are often
     * not used).
     *
     * Note that for custom bounds, even negative observations are placed in the positive
     * counts to simplify the implementation and avoid ambiguity of where to place
     * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
     * the zero bucket are unused, if the schema indicates custom bucketing.
     *
     * For each upper boundary the previous boundary represent the lower exclusive
     * boundary for that bucket. The first element is the upper inclusive boundary
     * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
     * This is similar to "le" label semantics on classic histograms. You may add a
     * bucket with an upper bound of 0 to make sure that you really have no negative
     * observations, but in practice, native histogram rendering will show both with
     * or without first upper boundary 0 and no negative counts as the same case.
     *
     * The last element is not only the upper inclusive bound of the last regular
     * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
     * </pre>
     *
     * <code>repeated double custom_values = 16;</code>
     * @param index The index of the element to return.
     * @return The customValues at the given index.
     */
    double getCustomValues(int index);

    io.prometheus.write.v2.Types.Histogram.CountCase getCountCase();

    io.prometheus.write.v2.Types.Histogram.ZeroCountCase getZeroCountCase();
  }
  /**
   * <pre>
   * A native histogram, also known as a sparse histogram.
   * Original design doc:
   * https://docs.google.com/document/d/1cLNv3aufPZb3fNfaJgdaRBZsInZKKIHo9E6HinJVbpM/edit
   * The appendix of this design doc also explains the concept of float
   * histograms. This Histogram message can represent both, the usual
   * integer histogram as well as a float histogram.
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.Histogram}
   */
  public static final class Histogram extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.Histogram)
      HistogramOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        Histogram.class.getName());
    }
    // Use Histogram.newBuilder() to construct.
    private Histogram(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Histogram() {
      negativeSpans_ = java.util.Collections.emptyList();
      negativeDeltas_ = emptyLongList();
      negativeCounts_ = emptyDoubleList();
      positiveSpans_ = java.util.Collections.emptyList();
      positiveDeltas_ = emptyLongList();
      positiveCounts_ = emptyDoubleList();
      resetHint_ = 0;
      customValues_ = emptyDoubleList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Histogram_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Histogram_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.prometheus.write.v2.Types.Histogram.class, io.prometheus.write.v2.Types.Histogram.Builder.class);
    }

    /**
     * Protobuf enum {@code io.prometheus.write.v2.Histogram.ResetHint}
     */
    public enum ResetHint
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Need to test for a counter reset explicitly.
       * </pre>
       *
       * <code>RESET_HINT_UNSPECIFIED = 0;</code>
       */
      RESET_HINT_UNSPECIFIED(0),
      /**
       * <pre>
       * This is the 1st histogram after a counter reset.
       * </pre>
       *
       * <code>RESET_HINT_YES = 1;</code>
       */
      RESET_HINT_YES(1),
      /**
       * <pre>
       * There was no counter reset between this and the previous Histogram.
       * </pre>
       *
       * <code>RESET_HINT_NO = 2;</code>
       */
      RESET_HINT_NO(2),
      /**
       * <pre>
       * This is a gauge histogram where counter resets don't happen.
       * </pre>
       *
       * <code>RESET_HINT_GAUGE = 3;</code>
       */
      RESET_HINT_GAUGE(3),
      UNRECOGNIZED(-1),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 31,
          /* patch= */ 1,
          /* suffix= */ "",
          ResetHint.class.getName());
      }
      /**
       * <pre>
       * Need to test for a counter reset explicitly.
       * </pre>
       *
       * <code>RESET_HINT_UNSPECIFIED = 0;</code>
       */
      public static final int RESET_HINT_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * This is the 1st histogram after a counter reset.
       * </pre>
       *
       * <code>RESET_HINT_YES = 1;</code>
       */
      public static final int RESET_HINT_YES_VALUE = 1;
      /**
       * <pre>
       * There was no counter reset between this and the previous Histogram.
       * </pre>
       *
       * <code>RESET_HINT_NO = 2;</code>
       */
      public static final int RESET_HINT_NO_VALUE = 2;
      /**
       * <pre>
       * This is a gauge histogram where counter resets don't happen.
       * </pre>
       *
       * <code>RESET_HINT_GAUGE = 3;</code>
       */
      public static final int RESET_HINT_GAUGE_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ResetHint valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ResetHint forNumber(int value) {
        switch (value) {
          case 0: return RESET_HINT_UNSPECIFIED;
          case 1: return RESET_HINT_YES;
          case 2: return RESET_HINT_NO;
          case 3: return RESET_HINT_GAUGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ResetHint>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ResetHint> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ResetHint>() {
              public ResetHint findValueByNumber(int number) {
                return ResetHint.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.Histogram.getDescriptor().getEnumTypes().get(0);
      }

      private static final ResetHint[] VALUES = values();

      public static ResetHint valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ResetHint(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:io.prometheus.write.v2.Histogram.ResetHint)
    }

    private int countCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object count_;
    public enum CountCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      COUNT_INT(1),
      COUNT_FLOAT(2),
      COUNT_NOT_SET(0);
      private final int value;
      private CountCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CountCase valueOf(int value) {
        return forNumber(value);
      }

      public static CountCase forNumber(int value) {
        switch (value) {
          case 1: return COUNT_INT;
          case 2: return COUNT_FLOAT;
          case 0: return COUNT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public CountCase
    getCountCase() {
      return CountCase.forNumber(
          countCase_);
    }

    private int zeroCountCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object zeroCount_;
    public enum ZeroCountCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ZERO_COUNT_INT(6),
      ZERO_COUNT_FLOAT(7),
      ZEROCOUNT_NOT_SET(0);
      private final int value;
      private ZeroCountCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ZeroCountCase valueOf(int value) {
        return forNumber(value);
      }

      public static ZeroCountCase forNumber(int value) {
        switch (value) {
          case 6: return ZERO_COUNT_INT;
          case 7: return ZERO_COUNT_FLOAT;
          case 0: return ZEROCOUNT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ZeroCountCase
    getZeroCountCase() {
      return ZeroCountCase.forNumber(
          zeroCountCase_);
    }

    public static final int COUNT_INT_FIELD_NUMBER = 1;
    /**
     * <code>uint64 count_int = 1;</code>
     * @return Whether the countInt field is set.
     */
    @java.lang.Override
    public boolean hasCountInt() {
      return countCase_ == 1;
    }
    /**
     * <code>uint64 count_int = 1;</code>
     * @return The countInt.
     */
    @java.lang.Override
    public long getCountInt() {
      if (countCase_ == 1) {
        return (java.lang.Long) count_;
      }
      return 0L;
    }

    public static final int COUNT_FLOAT_FIELD_NUMBER = 2;
    /**
     * <code>double count_float = 2;</code>
     * @return Whether the countFloat field is set.
     */
    @java.lang.Override
    public boolean hasCountFloat() {
      return countCase_ == 2;
    }
    /**
     * <code>double count_float = 2;</code>
     * @return The countFloat.
     */
    @java.lang.Override
    public double getCountFloat() {
      if (countCase_ == 2) {
        return (java.lang.Double) count_;
      }
      return 0D;
    }

    public static final int SUM_FIELD_NUMBER = 3;
    private double sum_ = 0D;
    /**
     * <pre>
     * Sum of observations in the histogram.
     * </pre>
     *
     * <code>double sum = 3;</code>
     * @return The sum.
     */
    @java.lang.Override
    public double getSum() {
      return sum_;
    }

    public static final int SCHEMA_FIELD_NUMBER = 4;
    private int schema_ = 0;
    /**
     * <pre>
     * The schema defines the bucket schema. Currently, valid numbers
     * are -53 and numbers in range of -4 &lt;= n &lt;= 8. More valid numbers might be
     * added in future for new bucketing layouts.
     *
     * The schema equal to -53 means custom buckets. See
     * custom_values field description for more details.
     *
     * Values between -4 and 8 represent base-2 bucket schema, where 1
     * is a bucket boundary in each case, and then each power of two is
     * divided into 2^n (n is schema value) logarithmic buckets. Or in other words,
     * each bucket boundary is the previous boundary times 2^(2^-n).
     * </pre>
     *
     * <code>sint32 schema = 4;</code>
     * @return The schema.
     */
    @java.lang.Override
    public int getSchema() {
      return schema_;
    }

    public static final int ZERO_THRESHOLD_FIELD_NUMBER = 5;
    private double zeroThreshold_ = 0D;
    /**
     * <pre>
     * Breadth of the zero bucket.
     * </pre>
     *
     * <code>double zero_threshold = 5;</code>
     * @return The zeroThreshold.
     */
    @java.lang.Override
    public double getZeroThreshold() {
      return zeroThreshold_;
    }

    public static final int ZERO_COUNT_INT_FIELD_NUMBER = 6;
    /**
     * <code>uint64 zero_count_int = 6;</code>
     * @return Whether the zeroCountInt field is set.
     */
    @java.lang.Override
    public boolean hasZeroCountInt() {
      return zeroCountCase_ == 6;
    }
    /**
     * <code>uint64 zero_count_int = 6;</code>
     * @return The zeroCountInt.
     */
    @java.lang.Override
    public long getZeroCountInt() {
      if (zeroCountCase_ == 6) {
        return (java.lang.Long) zeroCount_;
      }
      return 0L;
    }

    public static final int ZERO_COUNT_FLOAT_FIELD_NUMBER = 7;
    /**
     * <code>double zero_count_float = 7;</code>
     * @return Whether the zeroCountFloat field is set.
     */
    @java.lang.Override
    public boolean hasZeroCountFloat() {
      return zeroCountCase_ == 7;
    }
    /**
     * <code>double zero_count_float = 7;</code>
     * @return The zeroCountFloat.
     */
    @java.lang.Override
    public double getZeroCountFloat() {
      if (zeroCountCase_ == 7) {
        return (java.lang.Double) zeroCount_;
      }
      return 0D;
    }

    public static final int NEGATIVE_SPANS_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<io.prometheus.write.v2.Types.BucketSpan> negativeSpans_;
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    @java.lang.Override
    public java.util.List<io.prometheus.write.v2.Types.BucketSpan> getNegativeSpansList() {
      return negativeSpans_;
    }
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
        getNegativeSpansOrBuilderList() {
      return negativeSpans_;
    }
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    @java.lang.Override
    public int getNegativeSpansCount() {
      return negativeSpans_.size();
    }
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.BucketSpan getNegativeSpans(int index) {
      return negativeSpans_.get(index);
    }
    /**
     * <pre>
     * Negative Buckets.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.BucketSpanOrBuilder getNegativeSpansOrBuilder(
        int index) {
      return negativeSpans_.get(index);
    }

    public static final int NEGATIVE_DELTAS_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList negativeDeltas_ =
        emptyLongList();
    /**
     * <pre>
     * Use either "negative_deltas" or "negative_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 negative_deltas = 9;</code>
     * @return A list containing the negativeDeltas.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getNegativeDeltasList() {
      return negativeDeltas_;
    }
    /**
     * <pre>
     * Use either "negative_deltas" or "negative_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 negative_deltas = 9;</code>
     * @return The count of negativeDeltas.
     */
    public int getNegativeDeltasCount() {
      return negativeDeltas_.size();
    }
    /**
     * <pre>
     * Use either "negative_deltas" or "negative_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 negative_deltas = 9;</code>
     * @param index The index of the element to return.
     * @return The negativeDeltas at the given index.
     */
    public long getNegativeDeltas(int index) {
      return negativeDeltas_.getLong(index);
    }
    private int negativeDeltasMemoizedSerializedSize = -1;

    public static final int NEGATIVE_COUNTS_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList negativeCounts_ =
        emptyDoubleList();
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double negative_counts = 10;</code>
     * @return A list containing the negativeCounts.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getNegativeCountsList() {
      return negativeCounts_;
    }
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double negative_counts = 10;</code>
     * @return The count of negativeCounts.
     */
    public int getNegativeCountsCount() {
      return negativeCounts_.size();
    }
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double negative_counts = 10;</code>
     * @param index The index of the element to return.
     * @return The negativeCounts at the given index.
     */
    public double getNegativeCounts(int index) {
      return negativeCounts_.getDouble(index);
    }
    private int negativeCountsMemoizedSerializedSize = -1;

    public static final int POSITIVE_SPANS_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private java.util.List<io.prometheus.write.v2.Types.BucketSpan> positiveSpans_;
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    @java.lang.Override
    public java.util.List<io.prometheus.write.v2.Types.BucketSpan> getPositiveSpansList() {
      return positiveSpans_;
    }
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
        getPositiveSpansOrBuilderList() {
      return positiveSpans_;
    }
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    @java.lang.Override
    public int getPositiveSpansCount() {
      return positiveSpans_.size();
    }
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.BucketSpan getPositiveSpans(int index) {
      return positiveSpans_.get(index);
    }
    /**
     * <pre>
     * Positive Buckets.
     *
     * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
     * * The span offset+length points to an the index of the custom_values array
     * or +Inf if pointing to the len of the array.
     * * The counts and deltas have the same meaning as for exponential histograms.
     * </pre>
     *
     * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
     */
    @java.lang.Override
    public io.prometheus.write.v2.Types.BucketSpanOrBuilder getPositiveSpansOrBuilder(
        int index) {
      return positiveSpans_.get(index);
    }

    public static final int POSITIVE_DELTAS_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList positiveDeltas_ =
        emptyLongList();
    /**
     * <pre>
     * Use either "positive_deltas" or "positive_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 positive_deltas = 12;</code>
     * @return A list containing the positiveDeltas.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPositiveDeltasList() {
      return positiveDeltas_;
    }
    /**
     * <pre>
     * Use either "positive_deltas" or "positive_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 positive_deltas = 12;</code>
     * @return The count of positiveDeltas.
     */
    public int getPositiveDeltasCount() {
      return positiveDeltas_.size();
    }
    /**
     * <pre>
     * Use either "positive_deltas" or "positive_counts", the former for
     * regular histograms with integer counts, the latter for
     * float histograms.
     * </pre>
     *
     * <code>repeated sint64 positive_deltas = 12;</code>
     * @param index The index of the element to return.
     * @return The positiveDeltas at the given index.
     */
    public long getPositiveDeltas(int index) {
      return positiveDeltas_.getLong(index);
    }
    private int positiveDeltasMemoizedSerializedSize = -1;

    public static final int POSITIVE_COUNTS_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList positiveCounts_ =
        emptyDoubleList();
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double positive_counts = 13;</code>
     * @return A list containing the positiveCounts.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getPositiveCountsList() {
      return positiveCounts_;
    }
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double positive_counts = 13;</code>
     * @return The count of positiveCounts.
     */
    public int getPositiveCountsCount() {
      return positiveCounts_.size();
    }
    /**
     * <pre>
     * Absolute count of each bucket.
     * </pre>
     *
     * <code>repeated double positive_counts = 13;</code>
     * @param index The index of the element to return.
     * @return The positiveCounts at the given index.
     */
    public double getPositiveCounts(int index) {
      return positiveCounts_.getDouble(index);
    }
    private int positiveCountsMemoizedSerializedSize = -1;

    public static final int RESET_HINT_FIELD_NUMBER = 14;
    private int resetHint_ = 0;
    /**
     * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
     * @return The enum numeric value on the wire for resetHint.
     */
    @java.lang.Override public int getResetHintValue() {
      return resetHint_;
    }
    /**
     * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
     * @return The resetHint.
     */
    @java.lang.Override public io.prometheus.write.v2.Types.Histogram.ResetHint getResetHint() {
      io.prometheus.write.v2.Types.Histogram.ResetHint result = io.prometheus.write.v2.Types.Histogram.ResetHint.forNumber(resetHint_);
      return result == null ? io.prometheus.write.v2.Types.Histogram.ResetHint.UNRECOGNIZED : result;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 15;
    private long timestamp_ = 0L;
    /**
     * <pre>
     * timestamp represents timestamp of the sample in ms.
     *
     * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
     * for conversion from/to time.Time to Prometheus timestamp.
     * </pre>
     *
     * <code>int64 timestamp = 15;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int CUSTOM_VALUES_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList customValues_ =
        emptyDoubleList();
    /**
     * <pre>
     * custom_values is an additional field used by non-exponential bucketing layouts.
     *
     * For custom buckets (-53 schema value) custom_values specify monotonically
     * increasing upper inclusive boundaries for the bucket counts with arbitrary
     * widths for this histogram. In other words, custom_values represents custom,
     * explicit bucketing that could have been converted from the classic histograms.
     *
     * Those bounds are then referenced by spans in positive_spans with corresponding positive
     * counts of deltas (refer to positive_spans for more details). This way we can
     * have encode sparse histograms with custom bucketing (many buckets are often
     * not used).
     *
     * Note that for custom bounds, even negative observations are placed in the positive
     * counts to simplify the implementation and avoid ambiguity of where to place
     * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
     * the zero bucket are unused, if the schema indicates custom bucketing.
     *
     * For each upper boundary the previous boundary represent the lower exclusive
     * boundary for that bucket. The first element is the upper inclusive boundary
     * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
     * This is similar to "le" label semantics on classic histograms. You may add a
     * bucket with an upper bound of 0 to make sure that you really have no negative
     * observations, but in practice, native histogram rendering will show both with
     * or without first upper boundary 0 and no negative counts as the same case.
     *
     * The last element is not only the upper inclusive bound of the last regular
     * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
     * </pre>
     *
     * <code>repeated double custom_values = 16;</code>
     * @return A list containing the customValues.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getCustomValuesList() {
      return customValues_;
    }
    /**
     * <pre>
     * custom_values is an additional field used by non-exponential bucketing layouts.
     *
     * For custom buckets (-53 schema value) custom_values specify monotonically
     * increasing upper inclusive boundaries for the bucket counts with arbitrary
     * widths for this histogram. In other words, custom_values represents custom,
     * explicit bucketing that could have been converted from the classic histograms.
     *
     * Those bounds are then referenced by spans in positive_spans with corresponding positive
     * counts of deltas (refer to positive_spans for more details). This way we can
     * have encode sparse histograms with custom bucketing (many buckets are often
     * not used).
     *
     * Note that for custom bounds, even negative observations are placed in the positive
     * counts to simplify the implementation and avoid ambiguity of where to place
     * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
     * the zero bucket are unused, if the schema indicates custom bucketing.
     *
     * For each upper boundary the previous boundary represent the lower exclusive
     * boundary for that bucket. The first element is the upper inclusive boundary
     * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
     * This is similar to "le" label semantics on classic histograms. You may add a
     * bucket with an upper bound of 0 to make sure that you really have no negative
     * observations, but in practice, native histogram rendering will show both with
     * or without first upper boundary 0 and no negative counts as the same case.
     *
     * The last element is not only the upper inclusive bound of the last regular
     * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
     * </pre>
     *
     * <code>repeated double custom_values = 16;</code>
     * @return The count of customValues.
     */
    public int getCustomValuesCount() {
      return customValues_.size();
    }
    /**
     * <pre>
     * custom_values is an additional field used by non-exponential bucketing layouts.
     *
     * For custom buckets (-53 schema value) custom_values specify monotonically
     * increasing upper inclusive boundaries for the bucket counts with arbitrary
     * widths for this histogram. In other words, custom_values represents custom,
     * explicit bucketing that could have been converted from the classic histograms.
     *
     * Those bounds are then referenced by spans in positive_spans with corresponding positive
     * counts of deltas (refer to positive_spans for more details). This way we can
     * have encode sparse histograms with custom bucketing (many buckets are often
     * not used).
     *
     * Note that for custom bounds, even negative observations are placed in the positive
     * counts to simplify the implementation and avoid ambiguity of where to place
     * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
     * the zero bucket are unused, if the schema indicates custom bucketing.
     *
     * For each upper boundary the previous boundary represent the lower exclusive
     * boundary for that bucket. The first element is the upper inclusive boundary
     * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
     * This is similar to "le" label semantics on classic histograms. You may add a
     * bucket with an upper bound of 0 to make sure that you really have no negative
     * observations, but in practice, native histogram rendering will show both with
     * or without first upper boundary 0 and no negative counts as the same case.
     *
     * The last element is not only the upper inclusive bound of the last regular
     * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
     * </pre>
     *
     * <code>repeated double custom_values = 16;</code>
     * @param index The index of the element to return.
     * @return The customValues at the given index.
     */
    public double getCustomValues(int index) {
      return customValues_.getDouble(index);
    }
    private int customValuesMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (countCase_ == 1) {
        output.writeUInt64(
            1, (long)((java.lang.Long) count_));
      }
      if (countCase_ == 2) {
        output.writeDouble(
            2, (double)((java.lang.Double) count_));
      }
      if (java.lang.Double.doubleToRawLongBits(sum_) != 0) {
        output.writeDouble(3, sum_);
      }
      if (schema_ != 0) {
        output.writeSInt32(4, schema_);
      }
      if (java.lang.Double.doubleToRawLongBits(zeroThreshold_) != 0) {
        output.writeDouble(5, zeroThreshold_);
      }
      if (zeroCountCase_ == 6) {
        output.writeUInt64(
            6, (long)((java.lang.Long) zeroCount_));
      }
      if (zeroCountCase_ == 7) {
        output.writeDouble(
            7, (double)((java.lang.Double) zeroCount_));
      }
      for (int i = 0; i < negativeSpans_.size(); i++) {
        output.writeMessage(8, negativeSpans_.get(i));
      }
      if (getNegativeDeltasList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(negativeDeltasMemoizedSerializedSize);
      }
      for (int i = 0; i < negativeDeltas_.size(); i++) {
        output.writeSInt64NoTag(negativeDeltas_.getLong(i));
      }
      if (getNegativeCountsList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(negativeCountsMemoizedSerializedSize);
      }
      for (int i = 0; i < negativeCounts_.size(); i++) {
        output.writeDoubleNoTag(negativeCounts_.getDouble(i));
      }
      for (int i = 0; i < positiveSpans_.size(); i++) {
        output.writeMessage(11, positiveSpans_.get(i));
      }
      if (getPositiveDeltasList().size() > 0) {
        output.writeUInt32NoTag(98);
        output.writeUInt32NoTag(positiveDeltasMemoizedSerializedSize);
      }
      for (int i = 0; i < positiveDeltas_.size(); i++) {
        output.writeSInt64NoTag(positiveDeltas_.getLong(i));
      }
      if (getPositiveCountsList().size() > 0) {
        output.writeUInt32NoTag(106);
        output.writeUInt32NoTag(positiveCountsMemoizedSerializedSize);
      }
      for (int i = 0; i < positiveCounts_.size(); i++) {
        output.writeDoubleNoTag(positiveCounts_.getDouble(i));
      }
      if (resetHint_ != io.prometheus.write.v2.Types.Histogram.ResetHint.RESET_HINT_UNSPECIFIED.getNumber()) {
        output.writeEnum(14, resetHint_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(15, timestamp_);
      }
      if (getCustomValuesList().size() > 0) {
        output.writeUInt32NoTag(130);
        output.writeUInt32NoTag(customValuesMemoizedSerializedSize);
      }
      for (int i = 0; i < customValues_.size(); i++) {
        output.writeDoubleNoTag(customValues_.getDouble(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (countCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              1, (long)((java.lang.Long) count_));
      }
      if (countCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              2, (double)((java.lang.Double) count_));
      }
      if (java.lang.Double.doubleToRawLongBits(sum_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, sum_);
      }
      if (schema_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, schema_);
      }
      if (java.lang.Double.doubleToRawLongBits(zeroThreshold_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, zeroThreshold_);
      }
      if (zeroCountCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              6, (long)((java.lang.Long) zeroCount_));
      }
      if (zeroCountCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              7, (double)((java.lang.Double) zeroCount_));
      }
      for (int i = 0; i < negativeSpans_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, negativeSpans_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < negativeDeltas_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(negativeDeltas_.getLong(i));
        }
        size += dataSize;
        if (!getNegativeDeltasList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        negativeDeltasMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getNegativeCountsList().size();
        size += dataSize;
        if (!getNegativeCountsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        negativeCountsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < positiveSpans_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, positiveSpans_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < positiveDeltas_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(positiveDeltas_.getLong(i));
        }
        size += dataSize;
        if (!getPositiveDeltasList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        positiveDeltasMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getPositiveCountsList().size();
        size += dataSize;
        if (!getPositiveCountsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        positiveCountsMemoizedSerializedSize = dataSize;
      }
      if (resetHint_ != io.prometheus.write.v2.Types.Histogram.ResetHint.RESET_HINT_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, resetHint_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, timestamp_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getCustomValuesList().size();
        size += dataSize;
        if (!getCustomValuesList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        customValuesMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.prometheus.write.v2.Types.Histogram)) {
        return super.equals(obj);
      }
      io.prometheus.write.v2.Types.Histogram other = (io.prometheus.write.v2.Types.Histogram) obj;

      if (java.lang.Double.doubleToLongBits(getSum())
          != java.lang.Double.doubleToLongBits(
              other.getSum())) return false;
      if (getSchema()
          != other.getSchema()) return false;
      if (java.lang.Double.doubleToLongBits(getZeroThreshold())
          != java.lang.Double.doubleToLongBits(
              other.getZeroThreshold())) return false;
      if (!getNegativeSpansList()
          .equals(other.getNegativeSpansList())) return false;
      if (!getNegativeDeltasList()
          .equals(other.getNegativeDeltasList())) return false;
      if (!getNegativeCountsList()
          .equals(other.getNegativeCountsList())) return false;
      if (!getPositiveSpansList()
          .equals(other.getPositiveSpansList())) return false;
      if (!getPositiveDeltasList()
          .equals(other.getPositiveDeltasList())) return false;
      if (!getPositiveCountsList()
          .equals(other.getPositiveCountsList())) return false;
      if (resetHint_ != other.resetHint_) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!getCustomValuesList()
          .equals(other.getCustomValuesList())) return false;
      if (!getCountCase().equals(other.getCountCase())) return false;
      switch (countCase_) {
        case 1:
          if (getCountInt()
              != other.getCountInt()) return false;
          break;
        case 2:
          if (java.lang.Double.doubleToLongBits(getCountFloat())
              != java.lang.Double.doubleToLongBits(
                  other.getCountFloat())) return false;
          break;
        case 0:
        default:
      }
      if (!getZeroCountCase().equals(other.getZeroCountCase())) return false;
      switch (zeroCountCase_) {
        case 6:
          if (getZeroCountInt()
              != other.getZeroCountInt()) return false;
          break;
        case 7:
          if (java.lang.Double.doubleToLongBits(getZeroCountFloat())
              != java.lang.Double.doubleToLongBits(
                  other.getZeroCountFloat())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSum()));
      hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getSchema();
      hash = (37 * hash) + ZERO_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getZeroThreshold()));
      if (getNegativeSpansCount() > 0) {
        hash = (37 * hash) + NEGATIVE_SPANS_FIELD_NUMBER;
        hash = (53 * hash) + getNegativeSpansList().hashCode();
      }
      if (getNegativeDeltasCount() > 0) {
        hash = (37 * hash) + NEGATIVE_DELTAS_FIELD_NUMBER;
        hash = (53 * hash) + getNegativeDeltasList().hashCode();
      }
      if (getNegativeCountsCount() > 0) {
        hash = (37 * hash) + NEGATIVE_COUNTS_FIELD_NUMBER;
        hash = (53 * hash) + getNegativeCountsList().hashCode();
      }
      if (getPositiveSpansCount() > 0) {
        hash = (37 * hash) + POSITIVE_SPANS_FIELD_NUMBER;
        hash = (53 * hash) + getPositiveSpansList().hashCode();
      }
      if (getPositiveDeltasCount() > 0) {
        hash = (37 * hash) + POSITIVE_DELTAS_FIELD_NUMBER;
        hash = (53 * hash) + getPositiveDeltasList().hashCode();
      }
      if (getPositiveCountsCount() > 0) {
        hash = (37 * hash) + POSITIVE_COUNTS_FIELD_NUMBER;
        hash = (53 * hash) + getPositiveCountsList().hashCode();
      }
      hash = (37 * hash) + RESET_HINT_FIELD_NUMBER;
      hash = (53 * hash) + resetHint_;
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      if (getCustomValuesCount() > 0) {
        hash = (37 * hash) + CUSTOM_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getCustomValuesList().hashCode();
      }
      switch (countCase_) {
        case 1:
          hash = (37 * hash) + COUNT_INT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getCountInt());
          break;
        case 2:
          hash = (37 * hash) + COUNT_FLOAT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getCountFloat()));
          break;
        case 0:
        default:
      }
      switch (zeroCountCase_) {
        case 6:
          hash = (37 * hash) + ZERO_COUNT_INT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getZeroCountInt());
          break;
        case 7:
          hash = (37 * hash) + ZERO_COUNT_FLOAT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getZeroCountFloat()));
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.prometheus.write.v2.Types.Histogram parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.prometheus.write.v2.Types.Histogram parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.Histogram parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.prometheus.write.v2.Types.Histogram prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A native histogram, also known as a sparse histogram.
     * Original design doc:
     * https://docs.google.com/document/d/1cLNv3aufPZb3fNfaJgdaRBZsInZKKIHo9E6HinJVbpM/edit
     * The appendix of this design doc also explains the concept of float
     * histograms. This Histogram message can represent both, the usual
     * integer histogram as well as a float histogram.
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.Histogram}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.Histogram)
        io.prometheus.write.v2.Types.HistogramOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Histogram_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Histogram_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.prometheus.write.v2.Types.Histogram.class, io.prometheus.write.v2.Types.Histogram.Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.Histogram.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        sum_ = 0D;
        schema_ = 0;
        zeroThreshold_ = 0D;
        if (negativeSpansBuilder_ == null) {
          negativeSpans_ = java.util.Collections.emptyList();
        } else {
          negativeSpans_ = null;
          negativeSpansBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        negativeDeltas_ = emptyLongList();
        negativeCounts_ = emptyDoubleList();
        if (positiveSpansBuilder_ == null) {
          positiveSpans_ = java.util.Collections.emptyList();
        } else {
          positiveSpans_ = null;
          positiveSpansBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        positiveDeltas_ = emptyLongList();
        positiveCounts_ = emptyDoubleList();
        resetHint_ = 0;
        timestamp_ = 0L;
        customValues_ = emptyDoubleList();
        countCase_ = 0;
        count_ = null;
        zeroCountCase_ = 0;
        zeroCount_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_Histogram_descriptor;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Histogram getDefaultInstanceForType() {
        return io.prometheus.write.v2.Types.Histogram.getDefaultInstance();
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Histogram build() {
        io.prometheus.write.v2.Types.Histogram result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.Histogram buildPartial() {
        io.prometheus.write.v2.Types.Histogram result = new io.prometheus.write.v2.Types.Histogram(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(io.prometheus.write.v2.Types.Histogram result) {
        if (negativeSpansBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            negativeSpans_ = java.util.Collections.unmodifiableList(negativeSpans_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.negativeSpans_ = negativeSpans_;
        } else {
          result.negativeSpans_ = negativeSpansBuilder_.build();
        }
        if (positiveSpansBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            positiveSpans_ = java.util.Collections.unmodifiableList(positiveSpans_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.positiveSpans_ = positiveSpans_;
        } else {
          result.positiveSpans_ = positiveSpansBuilder_.build();
        }
      }

      private void buildPartial0(io.prometheus.write.v2.Types.Histogram result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.sum_ = sum_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.schema_ = schema_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.zeroThreshold_ = zeroThreshold_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          negativeDeltas_.makeImmutable();
          result.negativeDeltas_ = negativeDeltas_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          negativeCounts_.makeImmutable();
          result.negativeCounts_ = negativeCounts_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          positiveDeltas_.makeImmutable();
          result.positiveDeltas_ = positiveDeltas_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          positiveCounts_.makeImmutable();
          result.positiveCounts_ = positiveCounts_;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.resetHint_ = resetHint_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.timestamp_ = timestamp_;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          customValues_.makeImmutable();
          result.customValues_ = customValues_;
        }
      }

      private void buildPartialOneofs(io.prometheus.write.v2.Types.Histogram result) {
        result.countCase_ = countCase_;
        result.count_ = this.count_;
        result.zeroCountCase_ = zeroCountCase_;
        result.zeroCount_ = this.zeroCount_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.prometheus.write.v2.Types.Histogram) {
          return mergeFrom((io.prometheus.write.v2.Types.Histogram)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.prometheus.write.v2.Types.Histogram other) {
        if (other == io.prometheus.write.v2.Types.Histogram.getDefaultInstance()) return this;
        if (java.lang.Double.doubleToRawLongBits(other.getSum()) != 0) {
          setSum(other.getSum());
        }
        if (other.getSchema() != 0) {
          setSchema(other.getSchema());
        }
        if (java.lang.Double.doubleToRawLongBits(other.getZeroThreshold()) != 0) {
          setZeroThreshold(other.getZeroThreshold());
        }
        if (negativeSpansBuilder_ == null) {
          if (!other.negativeSpans_.isEmpty()) {
            if (negativeSpans_.isEmpty()) {
              negativeSpans_ = other.negativeSpans_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureNegativeSpansIsMutable();
              negativeSpans_.addAll(other.negativeSpans_);
            }
            onChanged();
          }
        } else {
          if (!other.negativeSpans_.isEmpty()) {
            if (negativeSpansBuilder_.isEmpty()) {
              negativeSpansBuilder_.dispose();
              negativeSpansBuilder_ = null;
              negativeSpans_ = other.negativeSpans_;
              bitField0_ = (bitField0_ & ~0x00000080);
              negativeSpansBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetNegativeSpansFieldBuilder() : null;
            } else {
              negativeSpansBuilder_.addAllMessages(other.negativeSpans_);
            }
          }
        }
        if (!other.negativeDeltas_.isEmpty()) {
          if (negativeDeltas_.isEmpty()) {
            negativeDeltas_ = other.negativeDeltas_;
            negativeDeltas_.makeImmutable();
            bitField0_ |= 0x00000100;
          } else {
            ensureNegativeDeltasIsMutable();
            negativeDeltas_.addAll(other.negativeDeltas_);
          }
          onChanged();
        }
        if (!other.negativeCounts_.isEmpty()) {
          if (negativeCounts_.isEmpty()) {
            negativeCounts_ = other.negativeCounts_;
            negativeCounts_.makeImmutable();
            bitField0_ |= 0x00000200;
          } else {
            ensureNegativeCountsIsMutable();
            negativeCounts_.addAll(other.negativeCounts_);
          }
          onChanged();
        }
        if (positiveSpansBuilder_ == null) {
          if (!other.positiveSpans_.isEmpty()) {
            if (positiveSpans_.isEmpty()) {
              positiveSpans_ = other.positiveSpans_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensurePositiveSpansIsMutable();
              positiveSpans_.addAll(other.positiveSpans_);
            }
            onChanged();
          }
        } else {
          if (!other.positiveSpans_.isEmpty()) {
            if (positiveSpansBuilder_.isEmpty()) {
              positiveSpansBuilder_.dispose();
              positiveSpansBuilder_ = null;
              positiveSpans_ = other.positiveSpans_;
              bitField0_ = (bitField0_ & ~0x00000400);
              positiveSpansBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetPositiveSpansFieldBuilder() : null;
            } else {
              positiveSpansBuilder_.addAllMessages(other.positiveSpans_);
            }
          }
        }
        if (!other.positiveDeltas_.isEmpty()) {
          if (positiveDeltas_.isEmpty()) {
            positiveDeltas_ = other.positiveDeltas_;
            positiveDeltas_.makeImmutable();
            bitField0_ |= 0x00000800;
          } else {
            ensurePositiveDeltasIsMutable();
            positiveDeltas_.addAll(other.positiveDeltas_);
          }
          onChanged();
        }
        if (!other.positiveCounts_.isEmpty()) {
          if (positiveCounts_.isEmpty()) {
            positiveCounts_ = other.positiveCounts_;
            positiveCounts_.makeImmutable();
            bitField0_ |= 0x00001000;
          } else {
            ensurePositiveCountsIsMutable();
            positiveCounts_.addAll(other.positiveCounts_);
          }
          onChanged();
        }
        if (other.resetHint_ != 0) {
          setResetHintValue(other.getResetHintValue());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (!other.customValues_.isEmpty()) {
          if (customValues_.isEmpty()) {
            customValues_ = other.customValues_;
            customValues_.makeImmutable();
            bitField0_ |= 0x00008000;
          } else {
            ensureCustomValuesIsMutable();
            customValues_.addAll(other.customValues_);
          }
          onChanged();
        }
        switch (other.getCountCase()) {
          case COUNT_INT: {
            setCountInt(other.getCountInt());
            break;
          }
          case COUNT_FLOAT: {
            setCountFloat(other.getCountFloat());
            break;
          }
          case COUNT_NOT_SET: {
            break;
          }
        }
        switch (other.getZeroCountCase()) {
          case ZERO_COUNT_INT: {
            setZeroCountInt(other.getZeroCountInt());
            break;
          }
          case ZERO_COUNT_FLOAT: {
            setZeroCountFloat(other.getZeroCountFloat());
            break;
          }
          case ZEROCOUNT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                count_ = input.readUInt64();
                countCase_ = 1;
                break;
              } // case 8
              case 17: {
                count_ = input.readDouble();
                countCase_ = 2;
                break;
              } // case 17
              case 25: {
                sum_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 32: {
                schema_ = input.readSInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 41: {
                zeroThreshold_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 48: {
                zeroCount_ = input.readUInt64();
                zeroCountCase_ = 6;
                break;
              } // case 48
              case 57: {
                zeroCount_ = input.readDouble();
                zeroCountCase_ = 7;
                break;
              } // case 57
              case 66: {
                io.prometheus.write.v2.Types.BucketSpan m =
                    input.readMessage(
                        io.prometheus.write.v2.Types.BucketSpan.parser(),
                        extensionRegistry);
                if (negativeSpansBuilder_ == null) {
                  ensureNegativeSpansIsMutable();
                  negativeSpans_.add(m);
                } else {
                  negativeSpansBuilder_.addMessage(m);
                }
                break;
              } // case 66
              case 72: {
                long v = input.readSInt64();
                ensureNegativeDeltasIsMutable();
                negativeDeltas_.addLong(v);
                break;
              } // case 72
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureNegativeDeltasIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  negativeDeltas_.addLong(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              } // case 74
              case 81: {
                double v = input.readDouble();
                ensureNegativeCountsIsMutable();
                negativeCounts_.addDouble(v);
                break;
              } // case 81
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureNegativeCountsIsMutable(alloc / 8);
                while (input.getBytesUntilLimit() > 0) {
                  negativeCounts_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 82
              case 90: {
                io.prometheus.write.v2.Types.BucketSpan m =
                    input.readMessage(
                        io.prometheus.write.v2.Types.BucketSpan.parser(),
                        extensionRegistry);
                if (positiveSpansBuilder_ == null) {
                  ensurePositiveSpansIsMutable();
                  positiveSpans_.add(m);
                } else {
                  positiveSpansBuilder_.addMessage(m);
                }
                break;
              } // case 90
              case 96: {
                long v = input.readSInt64();
                ensurePositiveDeltasIsMutable();
                positiveDeltas_.addLong(v);
                break;
              } // case 96
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePositiveDeltasIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  positiveDeltas_.addLong(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              } // case 98
              case 105: {
                double v = input.readDouble();
                ensurePositiveCountsIsMutable();
                positiveCounts_.addDouble(v);
                break;
              } // case 105
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensurePositiveCountsIsMutable(alloc / 8);
                while (input.getBytesUntilLimit() > 0) {
                  positiveCounts_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 112: {
                resetHint_ = input.readEnum();
                bitField0_ |= 0x00002000;
                break;
              } // case 112
              case 120: {
                timestamp_ = input.readInt64();
                bitField0_ |= 0x00004000;
                break;
              } // case 120
              case 129: {
                double v = input.readDouble();
                ensureCustomValuesIsMutable();
                customValues_.addDouble(v);
                break;
              } // case 129
              case 130: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureCustomValuesIsMutable(alloc / 8);
                while (input.getBytesUntilLimit() > 0) {
                  customValues_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 130
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int countCase_ = 0;
      private java.lang.Object count_;
      public CountCase
          getCountCase() {
        return CountCase.forNumber(
            countCase_);
      }

      public Builder clearCount() {
        countCase_ = 0;
        count_ = null;
        onChanged();
        return this;
      }

      private int zeroCountCase_ = 0;
      private java.lang.Object zeroCount_;
      public ZeroCountCase
          getZeroCountCase() {
        return ZeroCountCase.forNumber(
            zeroCountCase_);
      }

      public Builder clearZeroCount() {
        zeroCountCase_ = 0;
        zeroCount_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <code>uint64 count_int = 1;</code>
       * @return Whether the countInt field is set.
       */
      public boolean hasCountInt() {
        return countCase_ == 1;
      }
      /**
       * <code>uint64 count_int = 1;</code>
       * @return The countInt.
       */
      public long getCountInt() {
        if (countCase_ == 1) {
          return (java.lang.Long) count_;
        }
        return 0L;
      }
      /**
       * <code>uint64 count_int = 1;</code>
       * @param value The countInt to set.
       * @return This builder for chaining.
       */
      public Builder setCountInt(long value) {

        countCase_ = 1;
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 count_int = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCountInt() {
        if (countCase_ == 1) {
          countCase_ = 0;
          count_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double count_float = 2;</code>
       * @return Whether the countFloat field is set.
       */
      public boolean hasCountFloat() {
        return countCase_ == 2;
      }
      /**
       * <code>double count_float = 2;</code>
       * @return The countFloat.
       */
      public double getCountFloat() {
        if (countCase_ == 2) {
          return (java.lang.Double) count_;
        }
        return 0D;
      }
      /**
       * <code>double count_float = 2;</code>
       * @param value The countFloat to set.
       * @return This builder for chaining.
       */
      public Builder setCountFloat(double value) {

        countCase_ = 2;
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double count_float = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCountFloat() {
        if (countCase_ == 2) {
          countCase_ = 0;
          count_ = null;
          onChanged();
        }
        return this;
      }

      private double sum_ ;
      /**
       * <pre>
       * Sum of observations in the histogram.
       * </pre>
       *
       * <code>double sum = 3;</code>
       * @return The sum.
       */
      @java.lang.Override
      public double getSum() {
        return sum_;
      }
      /**
       * <pre>
       * Sum of observations in the histogram.
       * </pre>
       *
       * <code>double sum = 3;</code>
       * @param value The sum to set.
       * @return This builder for chaining.
       */
      public Builder setSum(double value) {

        sum_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Sum of observations in the histogram.
       * </pre>
       *
       * <code>double sum = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sum_ = 0D;
        onChanged();
        return this;
      }

      private int schema_ ;
      /**
       * <pre>
       * The schema defines the bucket schema. Currently, valid numbers
       * are -53 and numbers in range of -4 &lt;= n &lt;= 8. More valid numbers might be
       * added in future for new bucketing layouts.
       *
       * The schema equal to -53 means custom buckets. See
       * custom_values field description for more details.
       *
       * Values between -4 and 8 represent base-2 bucket schema, where 1
       * is a bucket boundary in each case, and then each power of two is
       * divided into 2^n (n is schema value) logarithmic buckets. Or in other words,
       * each bucket boundary is the previous boundary times 2^(2^-n).
       * </pre>
       *
       * <code>sint32 schema = 4;</code>
       * @return The schema.
       */
      @java.lang.Override
      public int getSchema() {
        return schema_;
      }
      /**
       * <pre>
       * The schema defines the bucket schema. Currently, valid numbers
       * are -53 and numbers in range of -4 &lt;= n &lt;= 8. More valid numbers might be
       * added in future for new bucketing layouts.
       *
       * The schema equal to -53 means custom buckets. See
       * custom_values field description for more details.
       *
       * Values between -4 and 8 represent base-2 bucket schema, where 1
       * is a bucket boundary in each case, and then each power of two is
       * divided into 2^n (n is schema value) logarithmic buckets. Or in other words,
       * each bucket boundary is the previous boundary times 2^(2^-n).
       * </pre>
       *
       * <code>sint32 schema = 4;</code>
       * @param value The schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchema(int value) {

        schema_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The schema defines the bucket schema. Currently, valid numbers
       * are -53 and numbers in range of -4 &lt;= n &lt;= 8. More valid numbers might be
       * added in future for new bucketing layouts.
       *
       * The schema equal to -53 means custom buckets. See
       * custom_values field description for more details.
       *
       * Values between -4 and 8 represent base-2 bucket schema, where 1
       * is a bucket boundary in each case, and then each power of two is
       * divided into 2^n (n is schema value) logarithmic buckets. Or in other words,
       * each bucket boundary is the previous boundary times 2^(2^-n).
       * </pre>
       *
       * <code>sint32 schema = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSchema() {
        bitField0_ = (bitField0_ & ~0x00000008);
        schema_ = 0;
        onChanged();
        return this;
      }

      private double zeroThreshold_ ;
      /**
       * <pre>
       * Breadth of the zero bucket.
       * </pre>
       *
       * <code>double zero_threshold = 5;</code>
       * @return The zeroThreshold.
       */
      @java.lang.Override
      public double getZeroThreshold() {
        return zeroThreshold_;
      }
      /**
       * <pre>
       * Breadth of the zero bucket.
       * </pre>
       *
       * <code>double zero_threshold = 5;</code>
       * @param value The zeroThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setZeroThreshold(double value) {

        zeroThreshold_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Breadth of the zero bucket.
       * </pre>
       *
       * <code>double zero_threshold = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearZeroThreshold() {
        bitField0_ = (bitField0_ & ~0x00000010);
        zeroThreshold_ = 0D;
        onChanged();
        return this;
      }

      /**
       * <code>uint64 zero_count_int = 6;</code>
       * @return Whether the zeroCountInt field is set.
       */
      public boolean hasZeroCountInt() {
        return zeroCountCase_ == 6;
      }
      /**
       * <code>uint64 zero_count_int = 6;</code>
       * @return The zeroCountInt.
       */
      public long getZeroCountInt() {
        if (zeroCountCase_ == 6) {
          return (java.lang.Long) zeroCount_;
        }
        return 0L;
      }
      /**
       * <code>uint64 zero_count_int = 6;</code>
       * @param value The zeroCountInt to set.
       * @return This builder for chaining.
       */
      public Builder setZeroCountInt(long value) {

        zeroCountCase_ = 6;
        zeroCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 zero_count_int = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearZeroCountInt() {
        if (zeroCountCase_ == 6) {
          zeroCountCase_ = 0;
          zeroCount_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double zero_count_float = 7;</code>
       * @return Whether the zeroCountFloat field is set.
       */
      public boolean hasZeroCountFloat() {
        return zeroCountCase_ == 7;
      }
      /**
       * <code>double zero_count_float = 7;</code>
       * @return The zeroCountFloat.
       */
      public double getZeroCountFloat() {
        if (zeroCountCase_ == 7) {
          return (java.lang.Double) zeroCount_;
        }
        return 0D;
      }
      /**
       * <code>double zero_count_float = 7;</code>
       * @param value The zeroCountFloat to set.
       * @return This builder for chaining.
       */
      public Builder setZeroCountFloat(double value) {

        zeroCountCase_ = 7;
        zeroCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double zero_count_float = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearZeroCountFloat() {
        if (zeroCountCase_ == 7) {
          zeroCountCase_ = 0;
          zeroCount_ = null;
          onChanged();
        }
        return this;
      }

      private java.util.List<io.prometheus.write.v2.Types.BucketSpan> negativeSpans_ =
        java.util.Collections.emptyList();
      private void ensureNegativeSpansIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          negativeSpans_ = new java.util.ArrayList<io.prometheus.write.v2.Types.BucketSpan>(negativeSpans_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.BucketSpan, io.prometheus.write.v2.Types.BucketSpan.Builder, io.prometheus.write.v2.Types.BucketSpanOrBuilder> negativeSpansBuilder_;

      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.BucketSpan> getNegativeSpansList() {
        if (negativeSpansBuilder_ == null) {
          return java.util.Collections.unmodifiableList(negativeSpans_);
        } else {
          return negativeSpansBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public int getNegativeSpansCount() {
        if (negativeSpansBuilder_ == null) {
          return negativeSpans_.size();
        } else {
          return negativeSpansBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan getNegativeSpans(int index) {
        if (negativeSpansBuilder_ == null) {
          return negativeSpans_.get(index);
        } else {
          return negativeSpansBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder setNegativeSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan value) {
        if (negativeSpansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNegativeSpansIsMutable();
          negativeSpans_.set(index, value);
          onChanged();
        } else {
          negativeSpansBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder setNegativeSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan.Builder builderForValue) {
        if (negativeSpansBuilder_ == null) {
          ensureNegativeSpansIsMutable();
          negativeSpans_.set(index, builderForValue.build());
          onChanged();
        } else {
          negativeSpansBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder addNegativeSpans(io.prometheus.write.v2.Types.BucketSpan value) {
        if (negativeSpansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNegativeSpansIsMutable();
          negativeSpans_.add(value);
          onChanged();
        } else {
          negativeSpansBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder addNegativeSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan value) {
        if (negativeSpansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNegativeSpansIsMutable();
          negativeSpans_.add(index, value);
          onChanged();
        } else {
          negativeSpansBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder addNegativeSpans(
          io.prometheus.write.v2.Types.BucketSpan.Builder builderForValue) {
        if (negativeSpansBuilder_ == null) {
          ensureNegativeSpansIsMutable();
          negativeSpans_.add(builderForValue.build());
          onChanged();
        } else {
          negativeSpansBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder addNegativeSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan.Builder builderForValue) {
        if (negativeSpansBuilder_ == null) {
          ensureNegativeSpansIsMutable();
          negativeSpans_.add(index, builderForValue.build());
          onChanged();
        } else {
          negativeSpansBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder addAllNegativeSpans(
          java.lang.Iterable<? extends io.prometheus.write.v2.Types.BucketSpan> values) {
        if (negativeSpansBuilder_ == null) {
          ensureNegativeSpansIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, negativeSpans_);
          onChanged();
        } else {
          negativeSpansBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder clearNegativeSpans() {
        if (negativeSpansBuilder_ == null) {
          negativeSpans_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          negativeSpansBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public Builder removeNegativeSpans(int index) {
        if (negativeSpansBuilder_ == null) {
          ensureNegativeSpansIsMutable();
          negativeSpans_.remove(index);
          onChanged();
        } else {
          negativeSpansBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan.Builder getNegativeSpansBuilder(
          int index) {
        return internalGetNegativeSpansFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpanOrBuilder getNegativeSpansOrBuilder(
          int index) {
        if (negativeSpansBuilder_ == null) {
          return negativeSpans_.get(index);  } else {
          return negativeSpansBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public java.util.List<? extends io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
           getNegativeSpansOrBuilderList() {
        if (negativeSpansBuilder_ != null) {
          return negativeSpansBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(negativeSpans_);
        }
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan.Builder addNegativeSpansBuilder() {
        return internalGetNegativeSpansFieldBuilder().addBuilder(
            io.prometheus.write.v2.Types.BucketSpan.getDefaultInstance());
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan.Builder addNegativeSpansBuilder(
          int index) {
        return internalGetNegativeSpansFieldBuilder().addBuilder(
            index, io.prometheus.write.v2.Types.BucketSpan.getDefaultInstance());
      }
      /**
       * <pre>
       * Negative Buckets.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan negative_spans = 8;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.BucketSpan.Builder> 
           getNegativeSpansBuilderList() {
        return internalGetNegativeSpansFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.BucketSpan, io.prometheus.write.v2.Types.BucketSpan.Builder, io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
          internalGetNegativeSpansFieldBuilder() {
        if (negativeSpansBuilder_ == null) {
          negativeSpansBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.prometheus.write.v2.Types.BucketSpan, io.prometheus.write.v2.Types.BucketSpan.Builder, io.prometheus.write.v2.Types.BucketSpanOrBuilder>(
                  negativeSpans_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          negativeSpans_ = null;
        }
        return negativeSpansBuilder_;
      }

      private com.google.protobuf.Internal.LongList negativeDeltas_ = emptyLongList();
      private void ensureNegativeDeltasIsMutable() {
        if (!negativeDeltas_.isModifiable()) {
          negativeDeltas_ = makeMutableCopy(negativeDeltas_);
        }
        bitField0_ |= 0x00000100;
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @return A list containing the negativeDeltas.
       */
      public java.util.List<java.lang.Long>
          getNegativeDeltasList() {
        negativeDeltas_.makeImmutable();
        return negativeDeltas_;
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @return The count of negativeDeltas.
       */
      public int getNegativeDeltasCount() {
        return negativeDeltas_.size();
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @param index The index of the element to return.
       * @return The negativeDeltas at the given index.
       */
      public long getNegativeDeltas(int index) {
        return negativeDeltas_.getLong(index);
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @param index The index to set the value at.
       * @param value The negativeDeltas to set.
       * @return This builder for chaining.
       */
      public Builder setNegativeDeltas(
          int index, long value) {

        ensureNegativeDeltasIsMutable();
        negativeDeltas_.setLong(index, value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @param value The negativeDeltas to add.
       * @return This builder for chaining.
       */
      public Builder addNegativeDeltas(long value) {

        ensureNegativeDeltasIsMutable();
        negativeDeltas_.addLong(value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @param values The negativeDeltas to add.
       * @return This builder for chaining.
       */
      public Builder addAllNegativeDeltas(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureNegativeDeltasIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, negativeDeltas_);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use either "negative_deltas" or "negative_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 negative_deltas = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearNegativeDeltas() {
        negativeDeltas_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList negativeCounts_ = emptyDoubleList();
      private void ensureNegativeCountsIsMutable() {
        if (!negativeCounts_.isModifiable()) {
          negativeCounts_ = makeMutableCopy(negativeCounts_);
        }
        bitField0_ |= 0x00000200;
      }
      private void ensureNegativeCountsIsMutable(int capacity) {
        if (!negativeCounts_.isModifiable()) {
          negativeCounts_ = makeMutableCopy(negativeCounts_, capacity);
        }
        bitField0_ |= 0x00000200;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @return A list containing the negativeCounts.
       */
      public java.util.List<java.lang.Double>
          getNegativeCountsList() {
        negativeCounts_.makeImmutable();
        return negativeCounts_;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @return The count of negativeCounts.
       */
      public int getNegativeCountsCount() {
        return negativeCounts_.size();
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @param index The index of the element to return.
       * @return The negativeCounts at the given index.
       */
      public double getNegativeCounts(int index) {
        return negativeCounts_.getDouble(index);
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @param index The index to set the value at.
       * @param value The negativeCounts to set.
       * @return This builder for chaining.
       */
      public Builder setNegativeCounts(
          int index, double value) {

        ensureNegativeCountsIsMutable();
        negativeCounts_.setDouble(index, value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @param value The negativeCounts to add.
       * @return This builder for chaining.
       */
      public Builder addNegativeCounts(double value) {

        ensureNegativeCountsIsMutable();
        negativeCounts_.addDouble(value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @param values The negativeCounts to add.
       * @return This builder for chaining.
       */
      public Builder addAllNegativeCounts(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureNegativeCountsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, negativeCounts_);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double negative_counts = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearNegativeCounts() {
        negativeCounts_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<io.prometheus.write.v2.Types.BucketSpan> positiveSpans_ =
        java.util.Collections.emptyList();
      private void ensurePositiveSpansIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          positiveSpans_ = new java.util.ArrayList<io.prometheus.write.v2.Types.BucketSpan>(positiveSpans_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.BucketSpan, io.prometheus.write.v2.Types.BucketSpan.Builder, io.prometheus.write.v2.Types.BucketSpanOrBuilder> positiveSpansBuilder_;

      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.BucketSpan> getPositiveSpansList() {
        if (positiveSpansBuilder_ == null) {
          return java.util.Collections.unmodifiableList(positiveSpans_);
        } else {
          return positiveSpansBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public int getPositiveSpansCount() {
        if (positiveSpansBuilder_ == null) {
          return positiveSpans_.size();
        } else {
          return positiveSpansBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan getPositiveSpans(int index) {
        if (positiveSpansBuilder_ == null) {
          return positiveSpans_.get(index);
        } else {
          return positiveSpansBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder setPositiveSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan value) {
        if (positiveSpansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePositiveSpansIsMutable();
          positiveSpans_.set(index, value);
          onChanged();
        } else {
          positiveSpansBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder setPositiveSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan.Builder builderForValue) {
        if (positiveSpansBuilder_ == null) {
          ensurePositiveSpansIsMutable();
          positiveSpans_.set(index, builderForValue.build());
          onChanged();
        } else {
          positiveSpansBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder addPositiveSpans(io.prometheus.write.v2.Types.BucketSpan value) {
        if (positiveSpansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePositiveSpansIsMutable();
          positiveSpans_.add(value);
          onChanged();
        } else {
          positiveSpansBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder addPositiveSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan value) {
        if (positiveSpansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePositiveSpansIsMutable();
          positiveSpans_.add(index, value);
          onChanged();
        } else {
          positiveSpansBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder addPositiveSpans(
          io.prometheus.write.v2.Types.BucketSpan.Builder builderForValue) {
        if (positiveSpansBuilder_ == null) {
          ensurePositiveSpansIsMutable();
          positiveSpans_.add(builderForValue.build());
          onChanged();
        } else {
          positiveSpansBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder addPositiveSpans(
          int index, io.prometheus.write.v2.Types.BucketSpan.Builder builderForValue) {
        if (positiveSpansBuilder_ == null) {
          ensurePositiveSpansIsMutable();
          positiveSpans_.add(index, builderForValue.build());
          onChanged();
        } else {
          positiveSpansBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder addAllPositiveSpans(
          java.lang.Iterable<? extends io.prometheus.write.v2.Types.BucketSpan> values) {
        if (positiveSpansBuilder_ == null) {
          ensurePositiveSpansIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, positiveSpans_);
          onChanged();
        } else {
          positiveSpansBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder clearPositiveSpans() {
        if (positiveSpansBuilder_ == null) {
          positiveSpans_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          positiveSpansBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public Builder removePositiveSpans(int index) {
        if (positiveSpansBuilder_ == null) {
          ensurePositiveSpansIsMutable();
          positiveSpans_.remove(index);
          onChanged();
        } else {
          positiveSpansBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan.Builder getPositiveSpansBuilder(
          int index) {
        return internalGetPositiveSpansFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpanOrBuilder getPositiveSpansOrBuilder(
          int index) {
        if (positiveSpansBuilder_ == null) {
          return positiveSpans_.get(index);  } else {
          return positiveSpansBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public java.util.List<? extends io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
           getPositiveSpansOrBuilderList() {
        if (positiveSpansBuilder_ != null) {
          return positiveSpansBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(positiveSpans_);
        }
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan.Builder addPositiveSpansBuilder() {
        return internalGetPositiveSpansFieldBuilder().addBuilder(
            io.prometheus.write.v2.Types.BucketSpan.getDefaultInstance());
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public io.prometheus.write.v2.Types.BucketSpan.Builder addPositiveSpansBuilder(
          int index) {
        return internalGetPositiveSpansFieldBuilder().addBuilder(
            index, io.prometheus.write.v2.Types.BucketSpan.getDefaultInstance());
      }
      /**
       * <pre>
       * Positive Buckets.
       *
       * In case of custom buckets (-53 schema value) the positive buckets are interpreted as follows:
       * * The span offset+length points to an the index of the custom_values array
       * or +Inf if pointing to the len of the array.
       * * The counts and deltas have the same meaning as for exponential histograms.
       * </pre>
       *
       * <code>repeated .io.prometheus.write.v2.BucketSpan positive_spans = 11;</code>
       */
      public java.util.List<io.prometheus.write.v2.Types.BucketSpan.Builder> 
           getPositiveSpansBuilderList() {
        return internalGetPositiveSpansFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.prometheus.write.v2.Types.BucketSpan, io.prometheus.write.v2.Types.BucketSpan.Builder, io.prometheus.write.v2.Types.BucketSpanOrBuilder> 
          internalGetPositiveSpansFieldBuilder() {
        if (positiveSpansBuilder_ == null) {
          positiveSpansBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.prometheus.write.v2.Types.BucketSpan, io.prometheus.write.v2.Types.BucketSpan.Builder, io.prometheus.write.v2.Types.BucketSpanOrBuilder>(
                  positiveSpans_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          positiveSpans_ = null;
        }
        return positiveSpansBuilder_;
      }

      private com.google.protobuf.Internal.LongList positiveDeltas_ = emptyLongList();
      private void ensurePositiveDeltasIsMutable() {
        if (!positiveDeltas_.isModifiable()) {
          positiveDeltas_ = makeMutableCopy(positiveDeltas_);
        }
        bitField0_ |= 0x00000800;
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @return A list containing the positiveDeltas.
       */
      public java.util.List<java.lang.Long>
          getPositiveDeltasList() {
        positiveDeltas_.makeImmutable();
        return positiveDeltas_;
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @return The count of positiveDeltas.
       */
      public int getPositiveDeltasCount() {
        return positiveDeltas_.size();
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @param index The index of the element to return.
       * @return The positiveDeltas at the given index.
       */
      public long getPositiveDeltas(int index) {
        return positiveDeltas_.getLong(index);
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @param index The index to set the value at.
       * @param value The positiveDeltas to set.
       * @return This builder for chaining.
       */
      public Builder setPositiveDeltas(
          int index, long value) {

        ensurePositiveDeltasIsMutable();
        positiveDeltas_.setLong(index, value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @param value The positiveDeltas to add.
       * @return This builder for chaining.
       */
      public Builder addPositiveDeltas(long value) {

        ensurePositiveDeltasIsMutable();
        positiveDeltas_.addLong(value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @param values The positiveDeltas to add.
       * @return This builder for chaining.
       */
      public Builder addAllPositiveDeltas(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePositiveDeltasIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, positiveDeltas_);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use either "positive_deltas" or "positive_counts", the former for
       * regular histograms with integer counts, the latter for
       * float histograms.
       * </pre>
       *
       * <code>repeated sint64 positive_deltas = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearPositiveDeltas() {
        positiveDeltas_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList positiveCounts_ = emptyDoubleList();
      private void ensurePositiveCountsIsMutable() {
        if (!positiveCounts_.isModifiable()) {
          positiveCounts_ = makeMutableCopy(positiveCounts_);
        }
        bitField0_ |= 0x00001000;
      }
      private void ensurePositiveCountsIsMutable(int capacity) {
        if (!positiveCounts_.isModifiable()) {
          positiveCounts_ = makeMutableCopy(positiveCounts_, capacity);
        }
        bitField0_ |= 0x00001000;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @return A list containing the positiveCounts.
       */
      public java.util.List<java.lang.Double>
          getPositiveCountsList() {
        positiveCounts_.makeImmutable();
        return positiveCounts_;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @return The count of positiveCounts.
       */
      public int getPositiveCountsCount() {
        return positiveCounts_.size();
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @param index The index of the element to return.
       * @return The positiveCounts at the given index.
       */
      public double getPositiveCounts(int index) {
        return positiveCounts_.getDouble(index);
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @param index The index to set the value at.
       * @param value The positiveCounts to set.
       * @return This builder for chaining.
       */
      public Builder setPositiveCounts(
          int index, double value) {

        ensurePositiveCountsIsMutable();
        positiveCounts_.setDouble(index, value);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @param value The positiveCounts to add.
       * @return This builder for chaining.
       */
      public Builder addPositiveCounts(double value) {

        ensurePositiveCountsIsMutable();
        positiveCounts_.addDouble(value);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @param values The positiveCounts to add.
       * @return This builder for chaining.
       */
      public Builder addAllPositiveCounts(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensurePositiveCountsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, positiveCounts_);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute count of each bucket.
       * </pre>
       *
       * <code>repeated double positive_counts = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearPositiveCounts() {
        positiveCounts_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private int resetHint_ = 0;
      /**
       * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
       * @return The enum numeric value on the wire for resetHint.
       */
      @java.lang.Override public int getResetHintValue() {
        return resetHint_;
      }
      /**
       * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
       * @param value The enum numeric value on the wire for resetHint to set.
       * @return This builder for chaining.
       */
      public Builder setResetHintValue(int value) {
        resetHint_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
       * @return The resetHint.
       */
      @java.lang.Override
      public io.prometheus.write.v2.Types.Histogram.ResetHint getResetHint() {
        io.prometheus.write.v2.Types.Histogram.ResetHint result = io.prometheus.write.v2.Types.Histogram.ResetHint.forNumber(resetHint_);
        return result == null ? io.prometheus.write.v2.Types.Histogram.ResetHint.UNRECOGNIZED : result;
      }
      /**
       * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
       * @param value The resetHint to set.
       * @return This builder for chaining.
       */
      public Builder setResetHint(io.prometheus.write.v2.Types.Histogram.ResetHint value) {
        if (value == null) { throw new NullPointerException(); }
        bitField0_ |= 0x00002000;
        resetHint_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.io.prometheus.write.v2.Histogram.ResetHint reset_hint = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearResetHint() {
        bitField0_ = (bitField0_ & ~0x00002000);
        resetHint_ = 0;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * timestamp represents timestamp of the sample in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 15;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * timestamp represents timestamp of the sample in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 15;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {

        timestamp_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * timestamp represents timestamp of the sample in ms.
       *
       * For Go, see github.com/prometheus/prometheus/model/timestamp/timestamp.go
       * for conversion from/to time.Time to Prometheus timestamp.
       * </pre>
       *
       * <code>int64 timestamp = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00004000);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList customValues_ = emptyDoubleList();
      private void ensureCustomValuesIsMutable() {
        if (!customValues_.isModifiable()) {
          customValues_ = makeMutableCopy(customValues_);
        }
        bitField0_ |= 0x00008000;
      }
      private void ensureCustomValuesIsMutable(int capacity) {
        if (!customValues_.isModifiable()) {
          customValues_ = makeMutableCopy(customValues_, capacity);
        }
        bitField0_ |= 0x00008000;
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @return A list containing the customValues.
       */
      public java.util.List<java.lang.Double>
          getCustomValuesList() {
        customValues_.makeImmutable();
        return customValues_;
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @return The count of customValues.
       */
      public int getCustomValuesCount() {
        return customValues_.size();
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @param index The index of the element to return.
       * @return The customValues at the given index.
       */
      public double getCustomValues(int index) {
        return customValues_.getDouble(index);
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @param index The index to set the value at.
       * @param value The customValues to set.
       * @return This builder for chaining.
       */
      public Builder setCustomValues(
          int index, double value) {

        ensureCustomValuesIsMutable();
        customValues_.setDouble(index, value);
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @param value The customValues to add.
       * @return This builder for chaining.
       */
      public Builder addCustomValues(double value) {

        ensureCustomValuesIsMutable();
        customValues_.addDouble(value);
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @param values The customValues to add.
       * @return This builder for chaining.
       */
      public Builder addAllCustomValues(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureCustomValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, customValues_);
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * custom_values is an additional field used by non-exponential bucketing layouts.
       *
       * For custom buckets (-53 schema value) custom_values specify monotonically
       * increasing upper inclusive boundaries for the bucket counts with arbitrary
       * widths for this histogram. In other words, custom_values represents custom,
       * explicit bucketing that could have been converted from the classic histograms.
       *
       * Those bounds are then referenced by spans in positive_spans with corresponding positive
       * counts of deltas (refer to positive_spans for more details). This way we can
       * have encode sparse histograms with custom bucketing (many buckets are often
       * not used).
       *
       * Note that for custom bounds, even negative observations are placed in the positive
       * counts to simplify the implementation and avoid ambiguity of where to place
       * an underflow bucket, e.g. (-2, 1]. Therefore negative buckets and
       * the zero bucket are unused, if the schema indicates custom bucketing.
       *
       * For each upper boundary the previous boundary represent the lower exclusive
       * boundary for that bucket. The first element is the upper inclusive boundary
       * for the first bucket, which implicitly has a lower inclusive bound of -Inf.
       * This is similar to "le" label semantics on classic histograms. You may add a
       * bucket with an upper bound of 0 to make sure that you really have no negative
       * observations, but in practice, native histogram rendering will show both with
       * or without first upper boundary 0 and no negative counts as the same case.
       *
       * The last element is not only the upper inclusive bound of the last regular
       * bucket, but implicitly the lower exclusive bound of the +Inf bucket.
       * </pre>
       *
       * <code>repeated double custom_values = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearCustomValues() {
        customValues_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.Histogram)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.Histogram)
    private static final io.prometheus.write.v2.Types.Histogram DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.prometheus.write.v2.Types.Histogram();
    }

    public static io.prometheus.write.v2.Types.Histogram getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Histogram>
        PARSER = new com.google.protobuf.AbstractParser<Histogram>() {
      @java.lang.Override
      public Histogram parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Histogram> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Histogram> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.prometheus.write.v2.Types.Histogram getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BucketSpanOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.prometheus.write.v2.BucketSpan)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Gap to previous span, or starting point for 1st span (which can be negative).
     * </pre>
     *
     * <code>sint32 offset = 1;</code>
     * @return The offset.
     */
    int getOffset();

    /**
     * <pre>
     * Length of consecutive buckets.
     * </pre>
     *
     * <code>uint32 length = 2;</code>
     * @return The length.
     */
    int getLength();
  }
  /**
   * <pre>
   * A BucketSpan defines a number of consecutive buckets with their
   * offset. Logically, it would be more straightforward to include the
   * bucket counts in the Span. However, the protobuf representation is
   * more compact in the way the data is structured here (with all the
   * buckets in a single array separate from the Spans).
   * </pre>
   *
   * Protobuf type {@code io.prometheus.write.v2.BucketSpan}
   */
  public static final class BucketSpan extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.prometheus.write.v2.BucketSpan)
      BucketSpanOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        BucketSpan.class.getName());
    }
    // Use BucketSpan.newBuilder() to construct.
    private BucketSpan(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BucketSpan() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_BucketSpan_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_BucketSpan_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.prometheus.write.v2.Types.BucketSpan.class, io.prometheus.write.v2.Types.BucketSpan.Builder.class);
    }

    public static final int OFFSET_FIELD_NUMBER = 1;
    private int offset_ = 0;
    /**
     * <pre>
     * Gap to previous span, or starting point for 1st span (which can be negative).
     * </pre>
     *
     * <code>sint32 offset = 1;</code>
     * @return The offset.
     */
    @java.lang.Override
    public int getOffset() {
      return offset_;
    }

    public static final int LENGTH_FIELD_NUMBER = 2;
    private int length_ = 0;
    /**
     * <pre>
     * Length of consecutive buckets.
     * </pre>
     *
     * <code>uint32 length = 2;</code>
     * @return The length.
     */
    @java.lang.Override
    public int getLength() {
      return length_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (offset_ != 0) {
        output.writeSInt32(1, offset_);
      }
      if (length_ != 0) {
        output.writeUInt32(2, length_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (offset_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, offset_);
      }
      if (length_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, length_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.prometheus.write.v2.Types.BucketSpan)) {
        return super.equals(obj);
      }
      io.prometheus.write.v2.Types.BucketSpan other = (io.prometheus.write.v2.Types.BucketSpan) obj;

      if (getOffset()
          != other.getOffset()) return false;
      if (getLength()
          != other.getLength()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + getOffset();
      hash = (37 * hash) + LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getLength();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.prometheus.write.v2.Types.BucketSpan parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.prometheus.write.v2.Types.BucketSpan parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.prometheus.write.v2.Types.BucketSpan parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.prometheus.write.v2.Types.BucketSpan prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A BucketSpan defines a number of consecutive buckets with their
     * offset. Logically, it would be more straightforward to include the
     * bucket counts in the Span. However, the protobuf representation is
     * more compact in the way the data is structured here (with all the
     * buckets in a single array separate from the Spans).
     * </pre>
     *
     * Protobuf type {@code io.prometheus.write.v2.BucketSpan}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.prometheus.write.v2.BucketSpan)
        io.prometheus.write.v2.Types.BucketSpanOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_BucketSpan_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_BucketSpan_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.prometheus.write.v2.Types.BucketSpan.class, io.prometheus.write.v2.Types.BucketSpan.Builder.class);
      }

      // Construct using io.prometheus.write.v2.Types.BucketSpan.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        offset_ = 0;
        length_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.prometheus.write.v2.Types.internal_static_io_prometheus_write_v2_BucketSpan_descriptor;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.BucketSpan getDefaultInstanceForType() {
        return io.prometheus.write.v2.Types.BucketSpan.getDefaultInstance();
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.BucketSpan build() {
        io.prometheus.write.v2.Types.BucketSpan result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.prometheus.write.v2.Types.BucketSpan buildPartial() {
        io.prometheus.write.v2.Types.BucketSpan result = new io.prometheus.write.v2.Types.BucketSpan(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.prometheus.write.v2.Types.BucketSpan result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.offset_ = offset_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.length_ = length_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.prometheus.write.v2.Types.BucketSpan) {
          return mergeFrom((io.prometheus.write.v2.Types.BucketSpan)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.prometheus.write.v2.Types.BucketSpan other) {
        if (other == io.prometheus.write.v2.Types.BucketSpan.getDefaultInstance()) return this;
        if (other.getOffset() != 0) {
          setOffset(other.getOffset());
        }
        if (other.getLength() != 0) {
          setLength(other.getLength());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                offset_ = input.readSInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                length_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int offset_ ;
      /**
       * <pre>
       * Gap to previous span, or starting point for 1st span (which can be negative).
       * </pre>
       *
       * <code>sint32 offset = 1;</code>
       * @return The offset.
       */
      @java.lang.Override
      public int getOffset() {
        return offset_;
      }
      /**
       * <pre>
       * Gap to previous span, or starting point for 1st span (which can be negative).
       * </pre>
       *
       * <code>sint32 offset = 1;</code>
       * @param value The offset to set.
       * @return This builder for chaining.
       */
      public Builder setOffset(int value) {

        offset_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Gap to previous span, or starting point for 1st span (which can be negative).
       * </pre>
       *
       * <code>sint32 offset = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOffset() {
        bitField0_ = (bitField0_ & ~0x00000001);
        offset_ = 0;
        onChanged();
        return this;
      }

      private int length_ ;
      /**
       * <pre>
       * Length of consecutive buckets.
       * </pre>
       *
       * <code>uint32 length = 2;</code>
       * @return The length.
       */
      @java.lang.Override
      public int getLength() {
        return length_;
      }
      /**
       * <pre>
       * Length of consecutive buckets.
       * </pre>
       *
       * <code>uint32 length = 2;</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(int value) {

        length_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Length of consecutive buckets.
       * </pre>
       *
       * <code>uint32 length = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000002);
        length_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.prometheus.write.v2.BucketSpan)
    }

    // @@protoc_insertion_point(class_scope:io.prometheus.write.v2.BucketSpan)
    private static final io.prometheus.write.v2.Types.BucketSpan DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.prometheus.write.v2.Types.BucketSpan();
    }

    public static io.prometheus.write.v2.Types.BucketSpan getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BucketSpan>
        PARSER = new com.google.protobuf.AbstractParser<BucketSpan>() {
      @java.lang.Override
      public BucketSpan parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BucketSpan> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BucketSpan> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.prometheus.write.v2.Types.BucketSpan getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_Request_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_Request_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_TimeSeries_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_TimeSeries_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_Exemplar_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_Exemplar_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_Sample_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_Sample_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_Metadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_Metadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_Histogram_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_Histogram_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_prometheus_write_v2_BucketSpan_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_prometheus_write_v2_BucketSpan_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013types.proto\022\026io.prometheus.write.v2\"X\n" +
      "\007Request\022\017\n\007symbols\030\004 \003(\t\0226\n\ntimeseries\030" +
      "\005 \003(\0132\".io.prometheus.write.v2.TimeSerie" +
      "sJ\004\010\001\020\004\"\215\002\n\nTimeSeries\022\023\n\013labels_refs\030\001 " +
      "\003(\r\022/\n\007samples\030\002 \003(\0132\036.io.prometheus.wri" +
      "te.v2.Sample\0225\n\nhistograms\030\003 \003(\0132!.io.pr" +
      "ometheus.write.v2.Histogram\0223\n\texemplars" +
      "\030\004 \003(\0132 .io.prometheus.write.v2.Exemplar" +
      "\0222\n\010metadata\030\005 \001(\0132 .io.prometheus.write" +
      ".v2.Metadata\022\031\n\021created_timestamp\030\006 \001(\003\"" +
      "A\n\010Exemplar\022\023\n\013labels_refs\030\001 \003(\r\022\r\n\005valu" +
      "e\030\002 \001(\001\022\021\n\ttimestamp\030\003 \001(\003\"*\n\006Sample\022\r\n\005" +
      "value\030\001 \001(\001\022\021\n\ttimestamp\030\002 \001(\003\"\311\002\n\010Metad" +
      "ata\0229\n\004type\030\001 \001(\0162+.io.prometheus.write." +
      "v2.Metadata.MetricType\022\020\n\010help_ref\030\003 \001(\r" +
      "\022\020\n\010unit_ref\030\004 \001(\r\"\335\001\n\nMetricType\022\033\n\027MET" +
      "RIC_TYPE_UNSPECIFIED\020\000\022\027\n\023METRIC_TYPE_CO" +
      "UNTER\020\001\022\025\n\021METRIC_TYPE_GAUGE\020\002\022\031\n\025METRIC" +
      "_TYPE_HISTOGRAM\020\003\022\036\n\032METRIC_TYPE_GAUGEHI" +
      "STOGRAM\020\004\022\027\n\023METRIC_TYPE_SUMMARY\020\005\022\024\n\020ME" +
      "TRIC_TYPE_INFO\020\006\022\030\n\024METRIC_TYPE_STATESET" +
      "\020\007\"\346\004\n\tHistogram\022\023\n\tcount_int\030\001 \001(\004H\000\022\025\n" +
      "\013count_float\030\002 \001(\001H\000\022\013\n\003sum\030\003 \001(\001\022\016\n\006sch" +
      "ema\030\004 \001(\021\022\026\n\016zero_threshold\030\005 \001(\001\022\030\n\016zer" +
      "o_count_int\030\006 \001(\004H\001\022\032\n\020zero_count_float\030" +
      "\007 \001(\001H\001\022:\n\016negative_spans\030\010 \003(\0132\".io.pro" +
      "metheus.write.v2.BucketSpan\022\027\n\017negative_" +
      "deltas\030\t \003(\022\022\027\n\017negative_counts\030\n \003(\001\022:\n" +
      "\016positive_spans\030\013 \003(\0132\".io.prometheus.wr" +
      "ite.v2.BucketSpan\022\027\n\017positive_deltas\030\014 \003" +
      "(\022\022\027\n\017positive_counts\030\r \003(\001\022?\n\nreset_hin" +
      "t\030\016 \001(\0162+.io.prometheus.write.v2.Histogr" +
      "am.ResetHint\022\021\n\ttimestamp\030\017 \001(\003\022\025\n\rcusto" +
      "m_values\030\020 \003(\001\"d\n\tResetHint\022\032\n\026RESET_HIN" +
      "T_UNSPECIFIED\020\000\022\022\n\016RESET_HINT_YES\020\001\022\021\n\rR" +
      "ESET_HINT_NO\020\002\022\024\n\020RESET_HINT_GAUGE\020\003B\007\n\005" +
      "countB\014\n\nzero_count\",\n\nBucketSpan\022\016\n\006off" +
      "set\030\001 \001(\021\022\016\n\006length\030\002 \001(\rB\tZ\007writev2b\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_io_prometheus_write_v2_Request_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_prometheus_write_v2_Request_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_Request_descriptor,
        new java.lang.String[] { "Symbols", "Timeseries", });
    internal_static_io_prometheus_write_v2_TimeSeries_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_io_prometheus_write_v2_TimeSeries_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_TimeSeries_descriptor,
        new java.lang.String[] { "LabelsRefs", "Samples", "Histograms", "Exemplars", "Metadata", "CreatedTimestamp", });
    internal_static_io_prometheus_write_v2_Exemplar_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_io_prometheus_write_v2_Exemplar_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_Exemplar_descriptor,
        new java.lang.String[] { "LabelsRefs", "Value", "Timestamp", });
    internal_static_io_prometheus_write_v2_Sample_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_io_prometheus_write_v2_Sample_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_Sample_descriptor,
        new java.lang.String[] { "Value", "Timestamp", });
    internal_static_io_prometheus_write_v2_Metadata_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_io_prometheus_write_v2_Metadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_Metadata_descriptor,
        new java.lang.String[] { "Type", "HelpRef", "UnitRef", });
    internal_static_io_prometheus_write_v2_Histogram_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_io_prometheus_write_v2_Histogram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_Histogram_descriptor,
        new java.lang.String[] { "CountInt", "CountFloat", "Sum", "Schema", "ZeroThreshold", "ZeroCountInt", "ZeroCountFloat", "NegativeSpans", "NegativeDeltas", "NegativeCounts", "PositiveSpans", "PositiveDeltas", "PositiveCounts", "ResetHint", "Timestamp", "CustomValues", "Count", "ZeroCount", });
    internal_static_io_prometheus_write_v2_BucketSpan_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_io_prometheus_write_v2_BucketSpan_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_prometheus_write_v2_BucketSpan_descriptor,
        new java.lang.String[] { "Offset", "Length", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
